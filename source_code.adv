start_at = "go_strange_ghost_range"
start_theme = my_theme

game_settings {
}

game_information {
   game_name                    = Go-Strange-Ghost Range
   game_version                 = 1.0.0
   game_shortname               = GSGR
   written_by                   = Andrew Schultz
   uuid                         = 194e9232-a134-4c81-b596-6e431efacea4
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = EctoComp 2025 Petite Mort entry, in the vein of Why Pout and Us Too
}

booleans {
   # POINT booleans
   point_duh_lies : boolean "false" ;
   point_repel_edgy : boolean "false" ;
   point_roof_ere : boolean "false" ;
   point_note_rubble : boolean "false" ;
   point_curse_treats : boolean "false" ;
   point_help_lots : boolean "false" ;

   # THINK booleans
   think_repel_edgy : boolean "false" ;
   think_curse_treats : boolean "false" ;
   think_help_lots : boolean "false" ;

   # option boolean(s)
   oaf_aid : boolean "false" ;
   oaf_aid_extra : boolean "false" ;

   # game state boolean(s)
   bonus_note : boolean "false" ;
   have_won : boolean "false" scope="survivor" ;

   # auxiliary semi-function-parameter booleans
   done_already : boolean "false" ;
   think_already : boolean "false" ;
   once_now_boolean : boolean "false" ;

   # dynamic boolean(s)
   db_at_the_end : dynamic_boolean {( is_at "go_strange_ghost_range" && point_help_lots)} ;
   thought_any : dynamic_boolean {( think_repel_edgy || think_help_lots|| think_curse_treats )} ;
}

integers {
   score : integer "0" ;
   max_score : integer "6" ;
}

strings {
   gsgr : string "<Go-Strange-Ghost Range<#ff0>>" ;
   my_score : string "{score}/{max_score}" ;
   c_oaf_aid : string "<OAF AID<#f0f>>" ;

   vm_about : string "<ABOUT<#f80>>" ;
   vm_credits : string "<CREDITS<#f80>>" ;
   vm_opt : string "<OPTIONS<#f80>>" ;
   vm_verbs : string "<VERBS<#f80>>" ;
   vm_versions : string "<VERSIONS<#f80>>" ;

   # in-game text
   rue_fear_block : string "Maybe you could go that way, but you're too scared, and you aren't in a position to see any such passage." ;

   # dynamic or long/special strings
   right_hand : dynamic_string {(oaf_aid ? oaf_says : my_score)} ;
   once_now : dynamic_string {( once_now_boolean ? "now" : "once" )} ;

   # oaf strings
   oaf_aid_status : dynamic_string {( ( oaf_aid_extra ? "extended" : "regular" ) + " mode" )} ;
   oaf_gsgr : dynamic_string {( !point_duh_lies ? ( oaf_aid_extra ? "<3/4<#0f0>>" : "3/4" ) :
      !oaf_aid_extra ? "5/4" :
      point_help_lots ? "<5/4<#0f0>>" : "<5/4<#ff0>>" )} ;
   oaf_rue_fear : dynamic_string {( point_roof_ere ? "DONE" :
      oaf_aid_extra ? "<4/3<#0f0>>" : "4/3" )} ;
   oaf_no_trouble : dynamic_string {( point_note_rubble ? "DONE" :
      oaf_aid_extra ? "<4/6<#0f0>>" : "4/6" )} ;
   oaf_cur_streets : dynamic_string {( point_curse_treats ? "DONE" :
      !oaf_aid_extra ? "5/6" :
      point_note_rubble ? "<5/6<#0f0>>" :
      "<5/6<#ff0>>" )} ;
   oaf_hell_plots : dynamic_string {( point_help_lots ? "DONE" :
      !oaf_aid_extra ? "4/4" :
      point_curse_treats ? "<4/4<#0f0>>" :
      "<4/4<#ff0>>" )} ;
   oaf_says : dynamic_string {( is_at "go_strange_ghost_range" ? oaf_gsgr :
      is_at "rue_fear" ? oaf_rue_fear :
      is_at "no_trouble" ? oaf_no_trouble :
      is_at "cur_streets" ? oaf_cur_streets :
      is_at "hell_plots" ? oaf_hell_plots :
      "BUG" )} ;

   custom_unknown_verb_error : string "Nothing comes of that. {gsgr} has a reduced verb list, which you can see with {vm_verbs}, and all point-scoring commands are irregular." ;
   exitserr : dynamic_string {( is_at "rue_fear" ? ( point_roof_ere ? "Not that way, but the four main cardinal directions work." : "The only path is back north.") : end_exits )} ;
   all_exits : dynamic_string {( is_at "rue_fear" ? ( !point_roof_ere ? "You see no exits except back north. Well, for now." : "You can go north, south, east or west." ) : end_exits )} ;
   end_exits : dynamic_string {( !point_duh_lies ? "South is the only way out, but you need to break free from the dull eyes." : "You can only go " + (has_visited "rue_fear" ? "back " : "" ) + (is_at "no_trouble" ? "north" : is_at "hell_plots" ? "west" : is_at "cur_streets" ? "east" : "south" ) + "." )}
}

objects {
}

vocabulary {
   : noun / aliases = [dude, well, dwell]
}

locations {
   go_strange_ghost_range : location header="{gsgr}" {
      on_command {
         : match "duh lies" {
            : if (point_duh_lies) {
               : print "Already done that." ;
            } : else {
               : gosub "add_point" ;
               : set_true "point_duh_lies" ;
            }
            : done ;
         }
         : match "duh _;_ lies" {
            : set_boolean var="done_already" {(point_duh_lies)} ;
            : gosub "reject_half" ;
         }
         : match "repel edgy" {
            : if (point_repel_edgy) {
               : print "Already done that." ;
            } : else_if (!point_help_lots) {
               : print "You don't have enough support yet." ;
               : set_true "think_repel_edgy" ;
            } : else {
               : print "With support, you're ready. Everybody brings a little edginess and a little perspective on how to curb the ghost's edginess. It's a tense fight, but numbers win out. The ghost flees." ;
               : gosub "add_point" ;
               : press_any_key ;
               : print "You reflect on your journey. The oaf and dude feel more useful. The folk feel as though they deserve at least limbo. Perhaps there was a clerical error. But you -- you're not ready to join the afterlife. There's just one thing: what to call this place, now the ghost is gone? It's tough, but given your successes, your companions have faith in you." ;
               : press_any_key ;
               : print "Aha! That's it!" ;
               : press_any_key ;
               : print "It was supposed to be a park, so you decide on Jog-'Round/Jaw Ground. Where people can socialize or enjoy nature. You ch3eck to make sure you haven't broken a grammatical rule too badly. But everyone nods and agrees." ;
               : press_any_key ;
               : print "You walk home to your own world uneventfully. You've half forgotten your outing, until you notice a post-it on your door. It says ..." ;
               : press_any_key ;
               : print "^c^<YOU SAW USE, AWW<#ff0>>\n^l^" ;
               : set_true "point_repel_edgy" ;
               : set_false "think_repel_edgy" ;
               : win_game ;
               : set_true "have_won" ;
            }
            : done ;
         }
         : match "repel _;_ edgy" {
            : set_boolean var="done_already" {(point_repel_edgy)} ;
            : set_boolean var="think_already" {(think_repel_edgy)} ;
            : gosub "reject_half" ;
         }
      }
   }
   rue_fear : location header="<Rue Fear<#f00>>" {
      on_command {
         : match "roof ere" {
            : if (point_roof_ere) {
               : print "Already done that." ;
            } : else {
               : gosub "add_point" ;
               : set_true "point_roof_ere" ;
            }
            : done ;
         }
         : match "roof _;_ ere" {
            : set_boolean var="done_already" {(point_roof_ere)} ;
            : gosub "reject_half" ;
         }
      }
   }
   no_trouble : location header="<No Trouble<#888>>" {
      on_command {
         : match "note rubble" {
            : if (point_note_rubble) {
               : print "Already done that." ;
            } : else {
               : gosub "add_point" ;
               : set_true "point_note_rubble" ;
            }
            : done ;
         }
         : match "note _;_ rubble" {
            : set_boolean var="done_already" {(point_note_rubble)} ;
            : gosub "reject_half" ;
         }
      }
   }
   cur_streets : location header="<Cur Streets<#f00>>" {
      on_command {
         : match "curse treats" {
            : if (point_curse_treats) {
               : print "Already done that." ;
            } : else_if (!point_note_rubble) {
               : print "You're too benign to provide a curse." ;
               : set_true "think_curse_treats" ;
            } : else {
               : gosub "add_point" ;
               : set_true "point_curse_treats" ;
               : set_false "think_curse_treats" ;
            }
            : done ;
         }
         : match "curse _;_ treats" {
            : set_boolean var="done_already" {(point_curse_treats)} ;
            : set_boolean var="think_already" {(think_curse_treats)} ;
            : gosub "reject_half" ;
         }
      }
   }
   hell_plots : location header="<Hell Plots<#f00>>" {
      on_command {
         : match "help lots" {
            : if (point_help_lots) {
               : print "Already done that." ;
            } : else_if (!point_curse_treats) {
               : print "Canine howls from the west leave you too fearful." ;
               : set_true "think_help_lots" ;
            } : else {
               : gosub "add_point" ;
               : set_true "point_help_lots" ;
               : set_false "think_help_lots" ;
            }
            : done ;
         }
         : match "help _;_ lots" {
            : set_boolean var="done_already" {(point_help_lots)} ;
            : set_boolean var="think_already" {(think_help_lots)} ;
            : gosub "reject_half" ;
         }
      }
   }
}

connections {
   from, direction, to = [
      go_strange_ghost_range, south, rue_fear,
      rue_fear, south, no_trouble,
      rue_fear, west, cur_streets,
      rue_fear, east, hell_plots
   ]
}

barriers {
   block_ghost_south_0 : block {
      location = rue_fear
      block_when_not = point_duh_lies
      message = You must face the dull eyes!
   }
   block_ghost_south_end : block {
      location = rue_fear
      block_when = db_at_the_end
      message = Your destiny is here!
   }
   block_rue_fear_w : block {
      location = cur_streets
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   block_rue_fear_e : block {
      location = hell_plots
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   block_rue_fear_s : block {
      location = no_trouble
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   done_rue_fear_w : block {
      location = cur_streets
      block_when = point_curse_treats
      message = You already took care of Cur Streets. No need to go back.
   }
   done_rue_fear_e : block {
      location = hell_plots
      block_when = point_help_lots
      message = You already took care of Hell Plots. No need to go back.
   }
   done_rue_fear_s : block {
      location = no_trouble
      block_when = point_note_rubble
      message = You already took care of No Trouble. No need to go back.
   }
}

subroutines {
   reject_half : subroutine {
      : if (done_already) {
         : print "One word's wrong, but you already did that fully." ;
      } : else_if (think_already) {
         : print "One word's wrong, but you already figured that fully." ;
      } : else {
         : print "Something almost happens. One word must be right." ;
      }
      : done ;
   }
   add_point : subroutine {
      : print "<Your score has just gone up by a point!<#ff0>>" ;
	  : increment "score" ;
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text ;
         : dynamic_text "right_hand" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = #222
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not right here and now.
   not_present = You can't see ${entity} here.
   ask_new_game                                   = Would you like to restart {gsgr}?
   ask_quit                                       = Do you wish to quit {gsgr}?
   invalid_choice                                 = {yn_or_12_or_14}
   post_quit = I hope you enjoyed the experience. Pressing {key_enter} will restart {gsgr}.
   unknown_verb                                   = {custom_unknown_verb_error}
   you_cant_go_that_direction                     = {exitserr}
      }
   }
}

on_render {
}

on_startup {
   : print "{gsgr}, by Andrew Schultz" ;
   : print "A go-stop-ghost op" ;
   : print "Submitted to the 2025 EctoComp Petite Mort" ;
   : press_any_key ;
   : if (have_won) {
      : print "There's nothing new to be found on replay, if you're wondering. But thanks for checking." ;
      : press_any_key ;
   }
   : print "You're too old for Halloween scariness and silliness, of course. But you still fear ten-cent library fines when books are a day overdue." ;
   : press_any_key ;
   : print "You had a couple due today. The library's closed now, but if you return the books in the drop before it opens tomorrow, you won't get fined." ;
   : press_any_key ;
   : print "You're not sure why you picked these two books, but you got ironic enjoyment from them: <Cruel-Itches-Crew Liches<#ff0>> and <Wight-Ail-Why Tale<#ff0>>." ;
   : press_any_key ;
   : print "You take a shortcut back through a mini-forest preserve in a city park. It's maybe four blocks square. But it's taking too long to get out. What is going on?" ;
   : press_any_key ;
   : print "Ah, there, things are opening up. But you don't recognize where you are, and there's a strange ghost. You can't face it alone!" ;
   : press_any_key ;
   : print "But wait. There is somebody. \"I'm just an oaf,\" they say, \"But I can help you if you need it. We need someone to perform a... a...\"" ;
   : print "There's an awkward pause, then ..." ;
   : print "\"Go-stop-ghost op!\"" ;
   : press_any_key ;
}

on_tick {
}

on_pre_describe {
}

on_describe {
}

on_pre_command {
}

on_command {
   : match "score _" {
      : print "You have scored {score} of {max_score} points so far." ;
      : if (!bonus_note) {
         : print "NOTE: {gsgr} contains no hidden bonus points." ;
         : set_true "bonus_note" ;
      }
   }
   : match "sw _;se _;ne _;nw _" {
      : print "Diagonal directions aren't used in {gsgr}." ;
      : done ;
   }
   : match "u _;d _" {
      : print "Vertical directions aren't used in {gsgr}." ;
      : done ;
   }
   : match "enter _;exit _;in _;out _" {
      : print "You don't need to go in or out in {gsgr}." ;
      : done ;
   }
   : match "exits _" {
      : print "{all_exits}" ;
      : done ;
   }
   : match "about _" {
      : done ;
   }
   : match "credits _; credit _" {
      : done ;
   }
   : match "verbs _;verb _" {
      : done ;
   }
   : match "versions _;version _" {
      : done ;
   }
   : match "think _" {
      : if (!thought_any) {
         : print "You haven't thought of any point-scoring commands to try later." ;
         : done ;
      }
      : if (think_curse_treats) {
         : set_boolean var="once_now_boolean" {( point_note_rubble )} ;
         : print "You can <CURSE TREATS<#f80>> {once_now} you have someone cursed to help you." ;
      }
      : if (think_help_lots) {
         : set_boolean var="once_now_boolean" {( point_curse_treats )} ;
         : print "You can <HELP LOTS<#f80>> {once_now} you have gotten rid of the distraction." ;
      }
      : if (think_repel_edgy) {
         : set_boolean var="once_now_boolean" {( point_help_lots )} ;
         : print "You can get rid of the ghost for good with <REPEL EDGY<#f80>> {once_now} you have enough support." ;
      }
   }
   : match "oaf aid" {
      : if (!oaf_aid) {
         : print {( "{c_oaf_aid} is now on, in {oaf_aid_status}." )} ;
         : set_true "oaf_aid" ;
      } : else {
         : set_boolean var="oaf_aid_extra" {(!oaf_aid_extra)} ;
         : print "{c_oaf_aid} is now switched to {oaf_aid_status}." ;
	  }
   }
   : match "oh fade" {
      : print {( "{c_oaf_aid} is " + (oaf_aid ? "now" : "already") + " off." )} ;
      : set_false "oaf_aid" ;
   }
}

assets {
}
