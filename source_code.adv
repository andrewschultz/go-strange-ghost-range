start_at = "go_strange_ghost_range"

game_settings {
}

game_information {
   game_name                    = Go-Strange-Ghost Range
   game_version                 = 1.0.0
   game_shortname               = GSGR
   written_by                   = Andrew Schultz
   uuid                         = 194e9232-a134-4c81-b596-6e431efacea4
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = EctoComp 2025 Petite Mort entry, in the vein of Why Pout and Us Too
}

booleans {
   # POINT booleans
   point_duh_lies : boolean "false" ;
   point_repel_edgy : boolean "false" ;
   point_roof_ere : boolean "false" ;
   point_note_rubble : boolean "false" ;
   point_curse_treats : boolean "false" ;
   point_help_lots : boolean "false" ;

   # THINK booleans
   think_repel_edgy : boolean "false" ;
   think_curse_treats : boolean "false" ;
   think_help_lots : boolean "false" ;

   # option boolean(s)
   oaf_aid : boolean "true" ;

   # game state boolean(s)
   bonus_note : boolean "false" ;

   # auxiliary semi-function-parameter booleans
   done_already : boolean "false" ;
   think_already : boolean "false" ;

   # dynamic boolean(s)
   db_at_the_end : dynamic_boolean {( is_at "go_strange_ghost_range" && point_help_lots)} ;
}

integers {
   score : integer "0" ;
   max_score : integer "6" ;
}

strings {
   gsgr : string "<Go-Strange-Ghost Range<#ff0>>" ;
   my_score : string "{score}/{max_score}" ;
   oaf_says : string "" ;

   right_hand : dynamic_string {(oaf_aid ? oaf_says : my_score)}
}

objects {
}

vocabulary {
   : noun / aliases = [dude, well, dwell]
}

locations {
   go_strange_ghost_range : location {
      on_command {
         : match "duh lies" {
            : if (point_duh_lies) {
               : print "Already done that." ;
            } : else {
               : print "You do the thing and get a point." ;
               : set_true "point_duh_lies" ;
            }
            : done ;
         }
         : match "duh _;_ lies" {
            : set_boolean var="done_already" {(point_duh_lies)} ;
            : gosub "reject_half" ;
         }
         : match "repel edgy" {
            : if (point_repel_edgy) {
               : print "Already done that." ;
            } : else_if (1 == 0) {
               : print "Still need to do something." ;
               : set_true "think_repel_edgy" ;
            } : else {
               : print "You do the thing and get a point." ;
               : set_true "point_repel_edgy" ;
               : win_game ;
            }
            : done ;
         }
         : match "repel _;_ edgy" {
            : set_boolean var="done_already" {(point_repel_edgy)} ;
            : set_boolean var="think_already" {(think_repel_edgy)} ;
            : gosub "reject_half" ;
         }
      }
   }
   rue_fear : location {
      on_command {
         : match "roof ere" {
            : if (point_roof_ere) {
               : print "Already done that." ;
            } : else {
               : print "You do the thing and get a point." ;
               : set_true "point_roof_ere" ;
            }
            : done ;
         }
         : match "roof _;_ ere" {
            : set_boolean var="done_already" {(point_roof_ere)} ;
            : gosub "reject_half" ;
         }
      }
   }
   no_trouble : location {
      on_command {
         : match "note rubble" {
            : if (point_note_rubble) {
               : print "Already done that." ;
            } : else {
               : print "You do the thing and get a point." ;
               : set_true "point_note_rubble" ;
            }
            : done ;
         }
         : match "note _;_ rubble" {
            : set_boolean var="done_already" {(point_note_rubble)} ;
            : gosub "reject_half" ;
         }
      }
   }
   cur_streets : location {
      on_command {
         : match "curse treats" {
            : if (point_curse_treats) {
               : print "Already done that." ;
            } : else_if (1 == 0) {
               : print "Still need to do something." ;
               : set_true "think_curse_treats" ;
            } : else {
               : print "You do the thing and get a point." ;
               : set_true "point_curse_treats" ;
            }
            : done ;
         }
         : match "curse _;_ treats" {
            : set_boolean var="done_already" {(point_curse_treats)} ;
            : set_boolean var="think_already" {(think_curse_treats)} ;
            : gosub "reject_half" ;
         }
      }
   }
   hell_plots : location {
      on_command {
         : match "help lots" {
            : if (point_help_lots) {
               : print "Already done that." ;
            } : else_if (1 == 0) {
               : print "Still need to do something." ;
               : set_true "think_help_lots" ;
            } : else {
               : print "You do the thing and get a point." ;
               : set_true "point_help_lots" ;
            }
            : done ;
         }
         : match "help _;_ lots" {
            : set_boolean var="done_already" {(point_help_lots)} ;
            : set_boolean var="think_already" {(think_help_lots)} ;
            : gosub "reject_half" ;
         }
      }
   }
}

connections {
   from, direction, to = [
      go_strange_ghost_range, south, rue_fear,
      rue_fear, south, no_trouble,
      rue_fear, west, cur_streets,
      rue_fear, east, hell_plots
   ]
}

barriers {
   block_ghost_south_0 : block {
      location = rue_fear
      block_when_not = point_duh_lies
      message = You must face the dull eyes!
   }
   block_ghost_south_end : block {
      location = rue_fear
      block_when = db_at_the_end
      message = Your destiny is here!
   }
   block_rue_fear_w : block {
      location = cur_streets
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   block_rue_fear_e : block {
      location = hell_plots
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   block_rue_fear_s : block {
      location = no_trouble
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   done_rue_fear_w : block {
      location = cur_streets
      block_when = point_curse_treats
      message = You already took care of Cur Streets. No need to go back.
   }
   done_rue_fear_e : block {
      location = hell_plots
      block_when = point_help_lots
      message = You already took care of Hell Plots. No need to go back.
   }
   done_rue_fear_s : block {
      location = no_trouble
      block_when = point_note_rubble
      message = You already took care of No Trouble. No need to go back.
   }
}

subroutines {
   reject_half : subroutine {
      : if (done_already) {
         : print "One word's wrong, but you already did that fully." ;
      } : else_if (think_already) {
         : print "One word's wrong, but you already figured that fully." ;
      } : else {
         : print "Something almost happens. One word must be right." ;
      }
      : done ;
   }
}

themes {
}

on_render {
}

on_startup {
}

on_tick {
}

on_pre_describe {
}

on_describe {
}

on_pre_command {
}

on_command {
   : match "score _" {
      : print "You have scored {score} of {max_score} points so far." ;
      : if (!bonus_note) {
         : print "NOTE: {gsgr} contains no hidden bonus points." ;
         : set_true "bonus_note" ;
      }
   }
   : match "oaf aid" {
      : print "OAF AID is now on." ;
      : set_true "oaf_aid" ;
   }
   : match "oh fade" {
      : print "OAF AID is now on." ;
      : set_true "oaf_aid" ;
   }
}

assets {
}
