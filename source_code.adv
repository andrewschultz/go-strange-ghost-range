start_at = "go_strange_ghost_range"
start_theme = my_theme

game_settings {
}

game_information {
   game_name                    = Go-Strange-Ghost Range
   game_version                 = 1.0.0
   game_shortname               = GSGR
   written_by                   = Andrew Schultz
   uuid                         = 194e9232-a134-4c81-b596-6e431efacea4
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = EctoComp 2025 Petite Mort entry, in the vein of Why Pout and Us Too
}

booleans {
   # POINT booleans
   point_duh_lies : boolean "false" ;
   point_repel_edgy : boolean "false" ;
   point_roof_ere : boolean "false" ;
   point_note_rubble : boolean "false" ;
   point_curse_treats : boolean "false" ;
   point_help_lots : boolean "false" ;

   # THINK booleans
   think_repel_edgy : boolean "false" ;
   think_curse_treats : boolean "false" ;
   think_help_lots : boolean "false" ;

   # option boolean(s)
   oaf_aid : boolean "false" ;
   oaf_aid_extra : boolean "false" ;

   # game state boolean(s)
   bonus_note : boolean "false" ;
   have_won : boolean "false" scope="survivor" ;

   # auxiliary semi-function-parameter booleans
   show_overlay : boolean "true" ;
   done_already : boolean "false" ;
   think_already : boolean "false" ;
   once_now_boolean : boolean "false" ;

   # dynamic boolean(s)
   db_at_the_end : dynamic_boolean {( is_at "go_strange_ghost_range" && point_help_lots)} ;
   thought_any : dynamic_boolean {( think_repel_edgy || think_help_lots|| think_curse_treats )} ;
}

integers {
   score : integer "0" ;
   max_score : integer "6" ;
}

strings {
   gsgr : string "<Go-Strange-Ghost Range<#ff0>>" ;
   my_score : string "{score}/{max_score}" ;
   c_oaf_aid : string "<OAF AID<#f0f>>" ;
   c_oh_fade : string "<OH FADE<#f0f>>" ;

   vm_about : string "<ABOUT<#f80>>" ;
   vm_credits : string "<CREDITS<#f80>>" ;
   vm_opt : string "<OPTIONS<#f80>>" ;
   vm_verbs : string "<VERBS<#f80>>" ;
   vm_versions : string "<VERSIONS<#f80>>" ;

   vd_think : string "<THINK<#f80>>" ;

   # in-game text
   rue_fear_block : string "Maybe you could go that way, but you're too scared, and you aren't in a position to see any such passage." ;

   # dynamic or long/special strings
   right_hand : dynamic_string {(oaf_aid ? oaf_says : my_score)} ;
   once_now : dynamic_string {( once_now_boolean ? "now" : "once" )} ;

   # room strings
   gsgr_desc : dynamic_string {( point_duh_lies ? "The dull eyes are gone, but the ghost remains here in {gsgr}." : "Dull eyes stare at you from behind the ghost in {gsgr}. There's an eerie sound, too." )} ;
   rf_desc : dynamic_string {( point_roof_ere ? "You've moved on from the fear of being trapped to the fear of being ambushed from all sides, because if you can follow the passages north, south, east and west, so can predators. But it's a practical step up. You hope." : "You fear being trapped in, except for going back south to the ghost. Maybe a new perspective could help you find passages out!" )} ;
   nt_desc : dynamic_string {( point_note_rubble ? "You found everything here, you're pretty sure. There's no trouble left to make." : "You hear NO TROUBLE ... NO TROUBLE. What does it mean? Should you have no trouble figuring what to do? Had you better start no trouble? Or is there no potential friend who could cause good trouble here?" )} ;
   cs_desc : dynamic_string {( point_curse_treats ? "The animals you goaded into eating the cursed treats are harmless now. They probably needed some rest, anyway. Hopefully, when they wake up, they'll go back to annoying souls who deserve it." : "Canine howls echo up and down here. You see the perpetrators, and while you could take one, you'd be in trouble fighting a whole pack. They occasionally duck in and out to covered areas, licking their lips as if well-fed." )} ;

   # oaf strings
   oaf_aid_status : dynamic_string {( ( oaf_aid_extra ? "extended" : "regular" ) + " mode" )} ;
   oaf_gsgr : dynamic_string {( !point_duh_lies ? ( oaf_aid_extra ? "<3/4<#0f0>>" : "3/4" ) :
      !oaf_aid_extra ? "5/4" :
      point_help_lots ? "<5/4<#0f0>>" : "<5/4<#ff0>>" )} ;
   oaf_rue_fear : dynamic_string {( point_roof_ere ? "DONE" :
      oaf_aid_extra ? "<4/3<#0f0>>" : "4/3" )} ;
   oaf_no_trouble : dynamic_string {( point_note_rubble ? "DONE" :
      oaf_aid_extra ? "<4/6<#0f0>>" : "4/6" )} ;
   oaf_cur_streets : dynamic_string {( point_curse_treats ? "DONE" :
      !oaf_aid_extra ? "5/6" :
      point_note_rubble ? "<5/6<#0f0>>" :
      "<5/6<#ff0>>" )} ;
   oaf_hell_plots : dynamic_string {( point_help_lots ? "DONE" :
      !oaf_aid_extra ? "4/4" :
      point_curse_treats ? "<4/4<#0f0>>" :
      "<4/4<#ff0>>" )} ;
   oaf_says : dynamic_string {( is_at "go_strange_ghost_range" ? oaf_gsgr :
      is_at "rue_fear" ? oaf_rue_fear :
      is_at "no_trouble" ? oaf_no_trouble :
      is_at "cur_streets" ? oaf_cur_streets :
      is_at "hell_plots" ? oaf_hell_plots :
      "BUG" )} ;

   custom_unknown_verb_error : string "Nothing comes of that. {gsgr} has a reduced verb list, which you can see with {vm_verbs}, and all point-scoring commands are irregular." ;
   exitserr : dynamic_string {( is_at "rue_fear" ? ( point_roof_ere ? "Not that way, but the four main cardinal directions work." : "The only path is back north.") : end_exits )} ;
   all_exits : dynamic_string {( is_at "rue_fear" ? ( !point_roof_ere ? "You see no exits except back north. Well, for now." : "You can go north, south, east or west." ) : end_exits )} ;
   end_exits : dynamic_string {( !point_duh_lies ? "South is the only way out, but you need to break free from the dull eyes." : "You can only go " + (has_visited "rue_fear" ? "back " : "" ) + (is_at "no_trouble" ? "north" : is_at "hell_plots" ? "west" : is_at "cur_streets" ? "east" : "south" ) + "." )}
}

objects {
}

vocabulary {
   : noun / aliases = [dude, well, dwell]
}

locations {
   go_strange_ghost_range : location "{gsgr_desc}" header="{gsgr}" graphic="r_go_strange_ghost_range" {
      on_command {
         : match "duh lies" {
            : if (point_duh_lies) {
               : print "Already done that." ;
            } : else {
               : gosub "add_point" ;
               : set_true "point_duh_lies" ;
               : update_graphic ;
            }
            : done ;
         }
         : match "duh _;_ lies" {
            : set_boolean var="done_already" {(point_duh_lies)} ;
            : gosub "reject_half" ;
         }
         : match "repel edgy" {
            : if (point_repel_edgy) {
               : print "Already done that." ;
            } : else_if (!point_help_lots) {
               : print "You don't have enough support yet." ;
               : set_true "think_repel_edgy" ;
            } : else {
               : print "With support, you're ready. Everybody brings a little edginess and a little perspective on how to curb the ghost's edginess. It's a tense fight, but numbers win out. The ghost flees." ;
               : set_true "point_repel_edgy" ;
               : set_false "think_repel_edgy" ;
               : gosub "add_point" ;
               : update_graphic ;
               : press_any_key ;
               : print "You reflect on your journey. The oaf and dude feel more useful. The folk feel as though they deserve at least limbo. Perhaps there was a clerical error. But you -- you're not ready to join the afterlife. There's just one thing: what to call this place, now the ghost is gone? It's tough, but given your successes, your companions have faith in you." ;
               : press_any_key ;
               : print "Aha! That's it!" ;
               : press_any_key ;
               : print "It was supposed to be a park, so you decide on Jog-'Round/Jaw Ground. Where people can socialize or enjoy nature. You ch3eck to make sure you haven't broken a grammatical rule too badly. But everyone nods and agrees." ;
               : press_any_key ;
               : print "You walk home to your own world uneventfully. You've half forgotten your outing, until you notice a post-it on your door. It says ..." ;
               : press_any_key ;
               : set_false "show_overlay" ;
               : update_graphic "s_you_saw_use_aww" ;
               : set_true "show_overlay" ;
               : print "^c^<YOU SAW USE, AWW<#ff0>>\n^l^" ;
               : win_game ;
               : set_true "have_won" ;
            }
            : done ;
         }
         : match "repel _;_ edgy" {
            : set_boolean var="done_already" {(point_repel_edgy)} ;
            : set_boolean var="think_already" {(think_repel_edgy)} ;
            : gosub "reject_half" ;
         }
      }
   }
   rue_fear : location "{rf_desc}" header="<Rue Fear<#f00>>" {
      on_command {
         : match "roof ere" {
            : if (point_roof_ere) {
               : print "Already done that." ;
            } : else {
               : gosub "add_point" ;
               : set_true "point_roof_ere" ;
               : update_graphic ;
            }
            : done ;
         }
         : match "roof _;_ ere" {
            : set_boolean var="done_already" {(point_roof_ere)} ;
            : gosub "reject_half" ;
         }
      }
   }
   no_trouble : location "{nt_desc}" header="<No Trouble<#888>>" {
      on_command {
         : match "note rubble" {
            : if (point_note_rubble) {
               : print "Already done that." ;
            } : else {
               : set_true "point_note_rubble" ;
               : gosub "add_point" ;
            }
            : done ;
         }
         : match "note _;_ rubble" {
            : set_boolean var="done_already" {(point_note_rubble)} ;
            : gosub "reject_half" ;
         }
      }
   }
   cur_streets : location "{cs_desc}" header="<Cur Streets<#f00>>" graphic="r_cur_streets" {
      on_command {
         : match "curse treats" {
            : if (point_curse_treats) {
               : print "Already done that." ;
            } : else_if (!point_note_rubble) {
               : print "You're too benign to provide a curse." ;
               : set_true "think_curse_treats" ;
            } : else {
               : gosub "add_point" ;
               : set_true "point_curse_treats" ;
               : set_false "think_curse_treats" ;
            }
            : done ;
         }
         : match "curse _;_ treats" {
            : set_boolean var="done_already" {(point_curse_treats)} ;
            : set_boolean var="think_already" {(think_curse_treats)} ;
            : gosub "reject_half" ;
         }
      }
   }
   hell_plots : location "{hp_desc}" header="<Hell Plots<#f00>>" graphic="r_hell_plots" {
      on_command {
         : match "help lots" {
            : if (point_help_lots) {
               : print "Already done that." ;
            } : else_if (!point_curse_treats) {
               : print "Canine howls from the west leave you too fearful." ;
               : set_true "think_help_lots" ;
            } : else {
               : gosub "add_point" ;
               : set_true "point_help_lots" ;
               : set_false "think_help_lots" ;
            }
            : done ;
         }
         : match "help _;_ lots" {
            : set_boolean var="done_already" {(point_help_lots)} ;
            : set_boolean var="think_already" {(think_help_lots)} ;
            : gosub "reject_half" ;
         }
      }
   }
}

connections {
   from, direction, to = [
      go_strange_ghost_range, south, rue_fear,
      rue_fear, south, no_trouble,
      rue_fear, west, cur_streets,
      rue_fear, east, hell_plots
   ]
}

barriers {
   block_ghost_south_0 : block {
      location = rue_fear
      block_when_not = point_duh_lies
      message = You must face the dull eyes!
   }
   block_ghost_south_end : block {
      location = rue_fear
      block_when = db_at_the_end
      message = Your destiny is here!
   }
   block_rue_fear_w : block {
      location = cur_streets
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   block_rue_fear_e : block {
      location = hell_plots
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   block_rue_fear_s : block {
      location = no_trouble
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   done_rue_fear_w : block {
      location = cur_streets
      block_when = point_curse_treats
      message = You already took care of Cur Streets. No need to go back.
   }
   done_rue_fear_e : block {
      location = hell_plots
      block_when = point_help_lots
      message = You already took care of Hell Plots. No need to go back.
   }
   done_rue_fear_s : block {
      location = no_trouble
      block_when = point_note_rubble
      message = You already took care of No Trouble. No need to go back.
   }
}

subroutines {
   meta_about : subroutine {
      : print "{gsgr} was written for EctoComp Petit Mort 2025." ;
      : print "I used Python scripts to generate a lot of the code to keep the development time under 4 hours." ;
      : print "I'm grateful to the organizers for not having image creation time count against these four hours." ;
      : print "{gsgr} has the same mechanic as two games I wrote in Inform 7: {why_pout} and {us_too}." ;
      : print "{gsgr} is meant to be a fairly straightforward game with five rooms and six points to score. I realized that the first two puzzles probably had more slang than the next ones, but HINTs can help non-English speakers." ;
      : print "Every point scoring command is an unusual verb, which it is indicated by the location, or something in the location." ;
   }

   meta_credits : subroutine {
      : print "Thanks to the administrators Ruber Eaglenest for holding EctoComp, as well as former administrators like JJ Guest and Duncan Bowsman." ;
      : print "Thanks to Chris Ainsley for creating Adventuron." ;
      : print "Thanks to testers here." ;
   }

   meta_versions : subroutine {
      : print "Version one was published on itch.io on October 30th, 2025." ;
   }

   meta_verbs : subroutine {
      : print "Many standard verbs aren't useful here. Also, there are no diagonal directions, or up or down." ;
      : print "{vd_think} is a useful verb, if you got a command right, but you hadn't prepped properly in-game yet." ;
      : print " Help and hint are available in the first two rooms, where the slanginess may be slightly confusing for players whose first language is not English." ;
      : print "{c_oaf_aid} and {c_oh_fade} toggle the oaf's help on and off. Using {c_oaf_aid} when it is on toggles whether or not the oaf also clues whether you can do something right now." ;
   }

   reject_half : subroutine {
      : if (done_already) {
         : print "One word's wrong, but you already did that fully." ;
      } : else_if (think_already) {
         : print "One word's wrong, but you already figured what to do fully. See {vd_think} for a refresher." ;
      } : else {
         : print "Something almost happens. One word must be right." ;
      }
      : done ;
   }
   add_point : subroutine {
      : print "<Your score has just gone up by a point!<#ff0>>" ;
	  : increment "score" ;
	  : update_graphic ;
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text ;
         : dynamic_text "right_hand" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = #222
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not right here and now.
   not_present = You can't see ${entity} here.
   ask_new_game                                   = Would you like to restart {gsgr}?
   ask_quit                                       = Do you wish to quit {gsgr}?
   invalid_choice                                 = {yn_or_12_or_14}
   post_quit = I hope you enjoyed the experience. Pressing {key_enter} will restart {gsgr}.
   unknown_verb                                   = {custom_unknown_verb_error}
   you_cant_go_that_direction                     = {exitserr}
      }
   }
}

on_render {
   : if (!show_overlay) {
      : done ;
   }
   : if (is_at "go_strange_ghost_range") {
      : if (score == 0) {
         : overlay "o_exclam_red" x="0" y="0" ;
         : overlay "o_dull_eyes" x="58" y="2" ;
         : overlay "o_dull_eyes" x="22" y="10" ;
         : overlay "o_dull_eyes" x="122" y="1" ;
         : overlay "o_dull_eyes" x="223" y="11" ;
         : overlay "o_dull_eyes" x="157" y="13" ;
      } : else_if (score == 1) {
         : overlay "o_exclam_orange" x="0" y="0" ;
      } : else_if (score == 2) {
         : overlay "o_exclam_yellow" x="0" y="0" ;
      } : else_if (score == 3) {
         : overlay "o_exclam_green" x="0" y="0" ;
      } : else_if (score == 4) {
         : overlay "o_exclam_blue" x="0" y="0" ;
      } : else_if (score == 5) {
         : overlay "o_exclam_purple" x="0" y="0" ;
      }
   }
}

on_startup {
   : print "{gsgr}, by Andrew Schultz" ;
   : print "A go-stop-ghost op" ;
   : print "Submitted to the 2025 EctoComp Petite Mort" ;
   : press_any_key ;
   : if (have_won) {
      : print "There's nothing new to be found on replay, if you're wondering. But thanks for checking." ;
      : press_any_key ;
   }
   : print "You're too old for Halloween scariness and silliness, of course. But you still fear ten-cent library fines when books are a day overdue." ;
   : press_any_key ;
   : print "You had a couple due today. The library's closed now, but if you return the books in the drop before it opens tomorrow, you won't get fined." ;
   : press_any_key ;
   : print "You're not sure why you picked these two books, but you got ironic enjoyment from them: <Cruel-Itches-Crew Liches<#ff0>> and <Wight-Ail-Why Tale<#ff0>>." ;
   : press_any_key ;
   : print "You take a shortcut back through a mini-forest preserve in a city park. It's maybe four blocks square. But it's taking too long to get out. What is going on?" ;
   : press_any_key ;
   : print "Ah, there, things are opening up. But you don't recognize where you are, and there's a strange ghost. You can't face it alone!" ;
   : press_any_key ;
   : print "But wait. There is somebody. \"I'm just an oaf,\" they say, \"But I can help you if you need it. We need someone to perform a... a...\"" ;
   : print "There's an awkward pause, then ..." ;
   : print "\"Go-stop-ghost op!\"" ;
   : press_any_key ;
}

on_tick {
}

on_pre_describe {
}

on_describe {
}

on_pre_command {
}

on_command {
   : match "score _" {
      : print "You have scored {score} of {max_score} points so far." ;
      : if (!bonus_note) {
         : print "NOTE: {gsgr} contains no hidden bonus points." ;
         : set_true "bonus_note" ;
      }
   }
   : match "sw _;se _;ne _;nw _" {
      : print "Diagonal directions aren't used in {gsgr}." ;
      : done ;
   }
   : match "u _;d _" {
      : print "Vertical directions aren't used in {gsgr}." ;
      : done ;
   }
   : match "enter _;exit _;in _;out _" {
      : print "You don't need to go in or out in {gsgr}." ;
      : done ;
   }
   : match "exits _" {
      : print "{all_exits}" ;
      : done ;
   }
   : match "about _" {
      : gosub "meta_about" ;
      : done ;
   }
   : match "credits _; credit _" {
      : gosub "meta_verbs" ;
      : done ;
   }
   : match "verbs _;verb _" {
      : gosub "meta_verbs" ;
      : done ;
   }
   : match "versions _;version _" {
      : gosub "meta_versions" ;
      : done ;
   }
   : match "think _" {
      : if (!thought_any) {
         : print "You haven't thought of any point-scoring commands to try later." ;
         : done ;
      }
      : if (think_curse_treats) {
         : set_boolean var="once_now_boolean" {( point_note_rubble )} ;
         : print "You can <CURSE TREATS<#f80>> {once_now} you have someone cursed to help you." ;
      }
      : if (think_help_lots) {
         : set_boolean var="once_now_boolean" {( point_curse_treats )} ;
         : print "You can <HELP LOTS<#f80>> {once_now} you have gotten rid of the distraction." ;
      }
      : if (think_repel_edgy) {
         : set_boolean var="once_now_boolean" {( point_help_lots )} ;
         : print "You can get rid of the ghost for good with <REPEL EDGY<#f80>> {once_now} you have enough support." ;
      }
   }
   : match "oaf aid" {
      : if (!oaf_aid) {
         : print {( "{c_oaf_aid} is now on, in {oaf_aid_status}." )} ;
         : set_true "oaf_aid" ;
      } : else {
         : set_boolean var="oaf_aid_extra" {(!oaf_aid_extra)} ;
         : print "{c_oaf_aid} is now switched to {oaf_aid_status}." ;
	  }
   }
   : match "oh fade" {
      : print {( "{c_oaf_aid} is " + (oaf_aid ? "now" : "already") + " off." )} ;
      : set_false "oaf_aid" ;
   }
}

assets {
   graphics {
   # overlays
      o_dull_eyes : base64_png "iVBORw0KGgoAAAANSUhEUgAAAA4AAAAGAgMAAACOdUcvAAAACVBMVEX///9gYGDAwMAVgKX3AAAAAXRSTlMAQObYZgAAABxJREFUCB1j0GrQamBYtWDVAoalC5ZCCTAXJAEAwOwM5cUDKHwAAAAASUVORK5CYII=" ;
      o_exclam_red : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA6ElEQVR4nO3bQQrDMAxFwaj0/ld2V11k15iCJf7MCURsHvIitda6gEyv0wMA5wgABBOAqarWVXX+/dZlDrYIAAQTAAgmAE9ZeXtyLlsEAIIJAAR7nx7gZ9/1bq06PEkPXb5Dlzm6GHZPbQBTdXnzdpmDLQIAweY8AbrostqZ467LHMPYAJ6y8vbkXLYIAAQrvwNDrjkbgBWPCYbd0zkBAP7OEwCC2QAgmABAMAGAYAIAwQQAggkABBMACCYAEEwAIJgAQDABgGACAMEEAIIJAAQTAAgmABBMACCYAEAwAYBgAgDBBACCfQDa7S9XC/xzSwAAAABJRU5ErkJggg==" ;
      o_exclam_orange : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA6klEQVR4nO3bQQrDMAxFwbj03iEnd1dddJeYgiX+zAlEbB7yImPOeQCZXrsHAPYRAAgmAF1dYx7X2P9+qzIHSwQAggkABBOAp6y8NTmXJQIAwQQAgr13D3Dbd70759g8SQ1VvkOVOapodk9tAF1VefNWmYMlAgDB+jwBqqiy2pnjV5U5mrEBPGXlrcm5LBEACDb8Dgy5+mwAVjw6aHZP+wQA+DtPAAhmA4BgAgDBBACCCQAEEwAIJgAQTAAgmABAMAGAYAIAwQQAggkABBMACCYAEEwAIJgAQDABgGACAMEEAIIJAAQTAAj2AegGNleAkCC0AAAAAElFTkSuQmCC" ;
      o_exclam_yellow : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA5klEQVR4nO3bMYrDMBBA0Tjs/a+sFCHFdhuzoBH/PXA/WOYzKnyttR5A03P3AMA+AgBhAnCsa72f3abMwR0CAGECAGEC8DUr70zO5Q4BgDABgLCf3QP83We9W9feOaaY8h6mzDHFWd+pDeBYU+68U+bgDgGAsIOuAFNMWe3M8duUOc5iA/ialXcm53KHAEDY5Xdg6DpoA7DicYKzvtODAgD8N1cACLMBQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQNgLCm4nSWDeFFgAAAAASUVORK5CYII=" ;
      o_exclam_green : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA6UlEQVR4nO3bMQ4CMQxFwRhx/yuHioIOIqTY+jMnsDbRk1Ns7b0XkOlxewDgHgGAYAIwVK3ater6+63LHJwRAAgmABBMAH5k5e3JuZwRAAgmABDseXuAb73Xu7123Z6lgy7focscXUy7pzaAobq8ebvMwRkBgGBjngBddFntzPGpyxzT2AB+ZOXtybmcEQAIVn4HhlxjNgArHhNMu6djAgD8nycABLMBQDABgGACAMEEAIIJAAQTAAgmABBMACCYAEAwAYBgAgDBBACCCQAEEwAIJgAQTAAgmABAMAGAYAIAwQQAggkABHsB4vsvVw8c1S0AAAAASUVORK5CYII=" ;
      o_exclam_blue : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA6UlEQVR4nO3bMQ4CMQxFwRhx/yuHioIOIqTY+jMnsDbRk1Ns7b0XkOlxewDgHgGAYAIwVNXaVev6+63LHJwRAAgmABBMAH5k5e3JuZwRAAgmABDseXuAb73Xu71X3Z6lgy7focscXUy7pzaAobq8ebvMwRkBgGBjngBddFntzPGpyxzT2AB+ZOXtybmcEQAIVn4HhlxjNgArHhNMu6djAgD8nycABLMBQDABgGACAMEEAIIJAAQTAAgmABBMACCYAEAwAYBgAgDBBACCCQAEEwAIJgAQTAAgmABAMAGAYAIAwQQAggkABHsB6wkvV8/hDe4AAAAASUVORK5CYII=" ;
      o_exclam_purple : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA6ElEQVR4nO3bMQrEMAxFQXvZ+1/ZqbZItzEBS/yZE4jYPOQic601gEyf0wMA5wgABBOAruZYY47z77cqc7BFACCYAEAwAXjKyluTc9kiABBMACDY9/QAf/utd2vMw5PUUOU7VJmjimb31AbQVZU3b5U52CIAEKzPE6CKKqudOe6qzNGMDeApK29NzmWLAECw6XdgyNVnA7Di0UGze9onAMDrPAEgmA0AggkABBMACCYAEEwAIJgAQDABgGACAMEEAIIJAAQTAAgmABBMACCYAEAwAYBgAgDBBACCCQAEEwAIJgAQTAAg2AUSfCdJdj47ugAAAABJRU5ErkJggg==" ;

   # rooms
      r_go_strange_ghost_range : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAMAAAAmJNS7AAADAFBMVEUAAACAAAAAgACAgAAAAICAAIAAgIDAwMDA3MCmyvBAIABgIACAIACgIADAIADgIAAAQAAgQABAQABgQACAQACgQADAQADgQAAAYAAgYABAYABgYACAYACgYADAYADgYAAAgAAggABAgABggACAgACggADAgADggAAAoAAgoABAoABgoACAoACgoADAoADgoAAAwAAgwABAwABgwACAwACgwADAwADgwAAA4AAg4ABA4ABg4ACA4ACg4ADA4ADg4AAAAEAgAEBAAEBgAECAAECgAEDAAEDgAEAAIEAgIEBAIEBgIECAIECgIEDAIEDgIEAAQEAgQEBAQEBgQECAQECgQEDAQEDgQEAAYEAgYEBAYEBgYECAYECgYEDAYEDgYEAAgEAggEBAgEBggECAgECggEDAgEDggEAAoEAgoEBAoEBgoECAoECgoEDAoEDgoEAAwEAgwEBAwEBgwECAwECgwEDAwEDgwEAA4EAg4EBA4EBg4ECA4ECg4EDA4EDg4EAAAIAgAIBAAIBgAICAAICgAIDAAIDgAIAAIIAgIIBAIIBgIICAIICgIIDAIIDgIIAAQIAgQIBAQIBgQICAQICgQIDAQIDgQIAAYIAgYIBAYIBgYICAYICgYIDAYIDgYIAAgIAggIBAgIBggICAgICggIDAgIDggIAAoIAgoIBAoIBgoICAoICgoIDAoIDgoIAAwIAgwIBAwIBgwICAwICgwIDAwIDgwIAA4IAg4IBA4IBg4ICA4ICg4IDA4IDg4IAAAMAgAMBAAMBgAMCAAMCgAMDAAMDgAMAAIMAgIMBAIMBgIMCAIMCgIMDAIMDgIMAAQMAgQMBAQMBgQMCAQMCgQMDAQMDgQMAAYMAgYMBAYMBgYMCAYMCgYMDAYMDgYMAAgMAggMBAgMBggMCAgMCggMDAgMDggMAAoMAgoMBAoMBgoMCAoMCgoMDAoMDgoMAAwMAgwMBAwMBgwMCAwMCgwMD/+/CgoKSAgID/AAAA/wD//wAAAP//AP8A//////9Y0jREAAABFUlEQVRo3u1VWw7DIAyLfIbe/6DwM2mbKkpCQlW1IGp/QpyHMSBCEATxQ375PkEz8Mx55gSdQBAEwT+Af8Ais+Ll/yGAl99o3EvA5OMBRwugzzI5YOTAYI/dfVUfig/jQuR+TasKmNwBWpBuB2SbsDOylb+IHvLg6/poSZTN6UJNQwHncoA+PlRLkJOPxoFh5x/7x9WedCWiAxr9ph1/QipWUrWbvOhnYdTXzSDuV1oEzYCTfowGriBAvWT22+uAVn46YB0HaIInoBE9wgDNJ+uLbdvCfiWwjCfgTA4wBywEuOoAtbmmA0rFYgdU+j6OQ/2OA7H7FSckEHAqATr6uSSAxV9QAJcxet7TgvRBbs4/PSS9HB8ANqlcTudETAAAAABJRU5ErkJggg==" ;

      rue_fear : dynamic_graphic {( point_roof_ere ? "r_rue_fear_after" : "r_rue_fear_before" )} ;
      r_rue_fear_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAIVBMVEUAAAAAgAAAgP+AAACAAP+AgIDAwMD/AAD/gED//wD///9FavbFAAACM0lEQVR4XuzVMY6DMBiE0QWhDXThBhEnScFBtqKmc0tJmZbb7kg2+n4zUto0mYJiGo8elvxT5Zvb6l2/eTe8vGvu3rUP77onhSUl7/bdu+Pwbhy9mybv5vkNQEpG0O+7EQzHYQTNOBpBO01G0M0zBA7gBLviAE4wKg7gBLPyBgACACAAAAIAIAAAAgACgQMoBqAYgGIAigEoBgCBA0AAAAQAQAAABABAAAAEDuAEe4kBKAagGIBiABAYAAQAQAAABABAAAAEAEDgACUGoBiAYgCKASgGoLwBgAAACACAAAAIAIAAAAhICgGAAEAAIAAQAIgBxKIQ9LErBEPsCkETu0LQxq4QdLG7EqxRoKzZokBZ84oCZc09CpQ1jyhQ1jyjQHcFSCGZoK9/wZYB4oBM0NS/4J4B4oBM0NW/oCZY6wG3jF4N6DN6NWDI6NWAJqNXA9qMXg3IBCSt53N84xJu53Pccwlf53M8cAnv53PccAkf53Pccgmf53Pc6WMDluUvpd9liQPU7bu6OEDdcaiLA9SNo7o4QN00qYsD1M2zOgZ8VOAr8BX4/FvgA1YBXAeIob8OEMMQB4iguQ4QQXsdIILuzQAdbwI63gR0vAvI3wTkbwJ5ggtwPAIcjwDHRwEmIMAEBM4JQeC/HTK2ARgIgdhQ7tgjE7JoJCvXJPSfAhpLbs7ies5lEHEug4hzGUSc8yDinAcR5zyIuFfABvQQ0ENAfwNqCKghoH76gQ04hfMBG3ADaoOAuy6cRhEAAAAASUVORK5CYII=" ;
      r_rue_fear_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAIVBMVEUAAAAAgAAAgP+AAACAAP+AgIDAwMD/AAD/gED//wD///9FavbFAAACVUlEQVR4XuzVIY7zMBiE4T9RtE1Yc4MqJ1nggyxaXGZaGLg0t/2nsqP3c0Yp7YIdEDDEo8eR/K/JXy5378aHd9OPd93Vu/7m3fBJYcnZu3X1btu8m2fvlsW7lF4A5GwE47oawbRtRtDNsxH0y2IEQ0rnBFkxAMUBnGBWHMAJkvICAAIAIAAAAgAgAAACAAKBAygGoBiAYgCKASgGoJwCQAAABABAAAAEAEAAwDlBrjEAxQAUA1AMQDEA5QwAAgAgAAACACAAAAIAIHCAGgNQDEAxAMUAFANQTgAgAAACACAAAAIAIADgjCCHAEAAIAAQAAgAxABiUQnG2FWCKXaVoItdJehjVwmG2B0J7lGgrnlEgbGeGQXqmmsUqGtuUaCvZ0aB4QiQQwrB2F7BowDEAYWga66gEPTtFdwKQAo5ENzbAZeC3gwYC3ozYCrozYCuoDcD+oLeDCgEJN/35/jCT/jYn+ORn/Bnf44nfsLr/hx3/IS3/Tnu+Qk/9+d40McGfH985fzx9R0HqFtXdXGAum1TFweom2d1cYC6ZVEXB6hLSd3vHPD+K9BHAs0AdU+BZoC6p0A7QALSbwTUPQc0AupSUvf+Ae+/gt/1FjBADJfjADGMxwFimOIAEXTHASLojwNEMLwYoONNQMebgI53AfmbgPxNoExwAY5HgOMR4PgowAQEmIDAPiEI/G+HjG0ABkIgNpQ79siELBrJyjUJ/aeAxpKbs7iecxlEnMsg4lwGEec8iDjnQcQ5DyLuFbABPQT0ENDfgBoCagion35gA07hfMAG3LXXeY9rPBfQAAAAAElFTkSuQmCC" ;

      no_trouble : dynamic_graphic {( point_note_rubble ? "r_no_trouble_after" : "r_no_trouble_before" )} ;
      r_no_trouble_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAQAD//wDonGzOAAAAp0lEQVR4XmIYHICDbHoYAIRPGsimqQFGARMFNAI0UEAPqCeGF2iggB5woIBBs4Yi+PhonEA0xIGBEsDIGhDAQAlgdRAMIUE5oNQ5tgEYCIEgCJLJHZh+/gPyQzr6b8UF2MELtoDR1idPZR33AzxKmQBcwOgAxRwBWXKLTQ7E1dYA2PQIDgBD2R4BSU/0AeqCingbAC6FWx/Y9AC9DwRrJ8smQCYrToEX7j8ur5QhD0kAAAAASUVORK5CYII=" ;
      r_no_trouble_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAQAD//wDonGzOAAAAPElEQVR4XmMYHICDbHoYAIRPGsimqQFGARMFNAI0kEsPtCeGF2ggnx54oEA2PWxAKIWASgaMGjBqwKgBAFZsNzDVyPAUAAAAAElFTkSuQmCC" ;

      r_cur_streets : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAMAAAAmJNS7AAADAFBMVEUAAACAAAAAgACAgAAAAICAAIAAgIDAwMDA3MCmyvBAIABgIACAIACgIADAIADgIAAAQAAgQABAQABgQACAQACgQADAQADgQAAAYAAgYABAYABgYACAYACgYADAYADgYAAAgAAggABAgABggACAgACggADAgADggAAAoAAgoABAoABgoACAoACgoADAoADgoAAAwAAgwABAwABgwACAwACgwADAwADgwAAA4AAg4ABA4ABg4ACA4ACg4ADA4ADg4AAAAEAgAEBAAEBgAECAAECgAEDAAEDgAEAAIEAgIEBAIEBgIECAIECgIEDAIEDgIEAAQEAgQEBAQEBgQECAQECgQEDAQEDgQEAAYEAgYEBAYEBgYECAYECgYEDAYEDgYEAAgEAggEBAgEBggECAgECggEDAgEDggEAAoEAgoEBAoEBgoECAoECgoEDAoEDgoEAAwEAgwEBAwEBgwECAwECgwEDAwEDgwEAA4EAg4EBA4EBg4ECA4ECg4EDA4EDg4EAAAIAgAIBAAIBgAICAAICgAIDAAIDgAIAAIIAgIIBAIIBgIICAIICgIIDAIIDgIIAAQIAgQIBAQIBgQICAQICgQIDAQIDgQIAAYIAgYIBAYIBgYICAYICgYIDAYIDgYIAAgIAggIBAgIBggICAgICggIDAgIDggIAAoIAgoIBAoIBgoICAoICgoIDAoIDgoIAAwIAgwIBAwIBgwICAwICgwIDAwIDgwIAA4IAg4IBA4IBg4ICA4ICg4IDA4IDg4IAAAMAgAMBAAMBgAMCAAMCgAMDAAMDgAMAAIMAgIMBAIMBgIMCAIMCgIMDAIMDgIMAAQMAgQMBAQMBgQMCAQMCgQMDAQMDgQMAAYMAgYMBAYMBgYMCAYMCgYMDAYMDgYMAAgMAggMBAgMBggMCAgMCggMDAgMDggMAAoMAgoMBAoMBgoMCAoMCgoMDAoMDgoMAAwMAgwMBAwMBgwMCAwMCgwMD/+/CgoKSAgID/AAAA/wD//wAAAP//AP8A//////9Y0jREAAAApElEQVRo3u3WOwoAIQxF0Vi5gey/moVOMw74xUYSzH1god07qESkyrMbuTQAAAAAAAAAAAAAAAAAAAAAxAXY8LgcoDRsCgcG6G5EMID+TQT7A2Rxcu0N+FbTFoDoAHIdgFYZ/wFlm9J/pAeSp9FzGQKspp5zACb9HQHY9PcDYNTfDYBVfy8AZv1VcvAAAAAAAAAAQGQAtYzd/DObBMP1NwXw0F9fuShMbrVnvQIAAAAASUVORK5CYII=" ;

      r_hell_plots : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAMAAAAmJNS7AAADAFBMVEUAAACAAAAAgACAgAAAAICAAIAAgIDAwMDA3MCmyvBAIABgIACAIACgIADAIADgIAAAQAAgQABAQABgQACAQACgQADAQADgQAAAYAAgYABAYABgYACAYACgYADAYADgYAAAgAAggABAgABggACAgACggADAgADggAAAoAAgoABAoABgoACAoACgoADAoADgoAAAwAAgwABAwABgwACAwACgwADAwADgwAAA4AAg4ABA4ABg4ACA4ACg4ADA4ADg4AAAAEAgAEBAAEBgAECAAECgAEDAAEDgAEAAIEAgIEBAIEBgIECAIECgIEDAIEDgIEAAQEAgQEBAQEBgQECAQECgQEDAQEDgQEAAYEAgYEBAYEBgYECAYECgYEDAYEDgYEAAgEAggEBAgEBggECAgECggEDAgED/gAAAoEAgoEBAoEBgoECAoECgoEDAoEDgoEAAwEAgwEBAwEBgwECAwECgwEDAwEDgwEAA4EAg4EBA4EBg4ECA4ECg4EDA4EDg4EAAAIAgAIBAAIBgAICAAICgAIDAAIDgAIAAIIAgIIBAIIBgIICAIICgIIDAIIDgIIAAQIAgQIBAQIBgQICAQICgQIDAQIDgQIAAYIAgYIBAYIBgYICAYICgYIDAYIDgYIAAgIAggIBAgIBggICAgICggIDAgIDggIAAoIAgoIBAoIBgoICAoICgoIDAoIDgoIAAwIAgwIBAwIBgwICAwICgwIDAwIDgwIAA4IAg4IBA4IBg4ICA4ICg4IDA4IDg4IAAAMAgAMBAAMBgAMCAAMCgAMDAAMD/AP8AIMAgIMBAIMBgIMCAIMCgIMDAIMDgIMAAQMAgQMBAQMBgQMCAQMCgQMDAQMDgQMAAYMAgYMBAYMBgYMCAYMCgYMDAYMDgYMAAgMAggMBAgMBggMCAgMCggMDAgMDggMAAoMAgoMBAoMBgoMCAoMCgoMDAoMDgoMAAwMAgwMBAwMBgwMCAwMCgwMD/+/CgoKSAgID/AAAA/wD//wAAAP//AP8A//////8leMIQAAAClElEQVRo3tWZW3LDMAhFxWrv/nfQzjTt2ILLyyht/ZWkqoBjXkIL5UcyT3JZ+kmLrT7riPmfmsjwkxZ8FsC4vgc2/C0A9wWY9nnYct4M4CaF2Z4DEHkTBWBKNNQ5AYDpYxgD39DrZj87U4tsovcVaPrAavo/iC67LTdDlclCFys8CpLncmcAmCZj+wodserjth3j8vobXgt8SUAzD6x2/oPlhzBe9lUn5uBuJgDZ++oY7Uy42unfDFyhv3VrA1SAGLuz2JkDIJy6dubZLlBHPUggtsKgDgBbWhJHwTPNkOo2vvUxFB0CsCthu8CM/Z7/bBI2B2hVw/Wg/9ssZ/lonsAmyVFwBkCo6leuxlQCQAjnKlBcBScAGBsaUX88Aaiot0puPQ+szvu3SlOuAqgOHs340AKpqgcAON1raL9RTiqd0S4AQSJ4DoBJR6IlD9+/6wuk//LyMD03HgBACPgAnIStfQnmZojsHwbgiIepklfVHEfXsshiU5rXbg8DAG9LmP2p+LYAkM+BBrMA3C5Fi88GcpAeXbBVDWQWgHhHH/TH42H5tFUAUWoKgBeEkITwuSMhvJdg56MUgVVpAr3JzPxdCC8SRiu6nYvz7WDFA3Bvwd9ov3IBOLMJS+8mAD8FIjH9PXZNch8JoJ8GV/UUsH1B6v1DjhGAoVSFwOoeAtz+s1kKKuxYZ1A9ElQBMG9Drcb3APi10EPdAJC8guEN6IwD0DMj4rFzqhSs3Bg4nHPDu/p6Gu0w2kpEAYDckHglb0GCi1/rP+YL4N0bvHhhNrQBbEHn35U+jnseAyTolEb5UrCaBUDIvee4B8QzaVezkMBqFoDTdf7J8LhUCioA5L8AkFMATjQ6Zy5Q3g1A5E+5QAXAB0u/WLDXm1XuAAAAAElFTkSuQmCC" ;

      # endgame
      s_you_saw_use_aww : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAAAD//wCwbzSHAAAA10lEQVR4Xu3VMWoEMQyF4beCwKA+vUujUyw5QYrkPorLOYWZyrxTxg5M+rwJgcD+vT+wETLeL/ZPgAdwB3ATgVesNOANZ0HyQwScs4ytdOEKTnLUSFeBrQYmAN9dBSpqDafLwCoQEAHHWEA6HJCA9gXQ3dNkAIEJHLsIIECEk9QAgmfqIP0OMErbiggMY/dtAeIk5jWgoJGtXQCYdg2wNKYBCfUNGhdgHeI+6Gltto9DAlCQZtk5G88/B16y4mAjZeB7jDETgYGVCNzPs08nKQC3P/lcH8AnwStDf3dGzvgAAAAASUVORK5CYII=" ;
   }
}
