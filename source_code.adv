start_at = "go_strange_ghost_range"
start_theme = my_theme

game_settings {
}

game_information {
   game_name                    = Go-Strange-Ghost Range
   game_version                 = 1.0.0
   game_shortname               = GSGR
   written_by                   = Andrew Schultz
   uuid                         = 194e9232-a134-4c81-b596-6e431efacea4
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = {ecomp} 2025 Petite Mort entry, in the vein of Why Pout and Us Too
}

booleans {
   # POINT booleans
   point_duh_lies : boolean "false" ;
   point_repel_edgy : boolean "false" ;
   point_roof_ere : boolean "false" ;
   point_note_rubble : boolean "false" ;
   point_curse_treats : boolean "false" ;
   point_help_lots : boolean "false" ;

   # THINK booleans
   think_repel_edgy : boolean "false" ;
   think_curse_treats : boolean "false" ;
   think_help_lots : boolean "false" ;

   think_note_yet : boolean "false" ;

   # option boolean(s)
   oaf_aid : boolean "false" ;
   oaf_aid_extra : boolean "false" ;

   # game state boolean(s)
   in_number_choice: boolean "true" ;
   map_dotted_notes : boolean "false" scope="survivor" ;
   map_black_note : boolean "false" scope="survivor" ;
   first_map_note : boolean "false" scope="survivor" ;
   listen_elegy : boolean "false" ;
   bonus_note : boolean "false" ;
   noun_based_noted : boolean "false" scope="survivor" ;
   have_won : boolean "false" scope="survivor" ;
   win_warn : boolean "false" scope="survivor" ;
   wait_yet : boolean "false" ;

   # auxiliary semi-function-parameter booleans
   showing_map : boolean "false" ;
   show_overlay : boolean "true" ;
   done_already : boolean "false" ;
   think_already : boolean "false" ;
   once_now_boolean : boolean "false" ;
   six_warn : boolean "false" ;
   showed_first_note : boolean "false" ;

   # dynamic boolean(s)
   db_at_the_end : dynamic_boolean {( is_at "go_strange_ghost_range" && point_help_lots)} ;
   thought_any : dynamic_boolean {( think_repel_edgy || think_help_lots|| think_curse_treats )} ;
   done_here : dynamic_boolean {( (point_help_lots && is_at "hell_plots") ||
      (point_roof_ere && is_at "rue_fear") ||
      (point_note_rubble && is_at "no_trouble") ||
      (point_curse_treats && is_at "cur_streets")
   )} ;
   unready_here : dynamic_boolean {( (is_at "hell_plots" && !point_curse_treats) ||
      (is_at "go_strange_ghost_range" && point_duh_lies && !point_help_lots) ||
      (is_at "cur_streets" && !point_note_rubble)
   )} ;
}

integers {
   score : integer "0" ;
   max_score : integer "6" ;

   to_think : dynamic_integer {( (think_repel_edgy ? 1 : 0) + (think_curse_treats ? 1 : 0) + (think_help_lots ? 1 : 0) )} ;
}

strings {
   # abbreviations
   gsgr : string "<Go-Strange-Ghost Range<#ff0>>" ;
   gsgo : string "<A<#f80>> go-<stop<#f80>>-ghost <op<#f80>>" ;
   wlwc : string "<weak loud wee cloud<#faa>>" ;
   dwdd : string "<Dude Well-Do-Dwell<#faa>>" ;
   pals : dynamic_string {( point_help_lots ? "" : "s" )} ;
   ecomp : string "<EctoComp<#f80>>[https://itch.io/jam/ectocomp-2025]" ;

   # changeables
   c_dull_eyes : string "<DULL EYES<#88f>>" ;
   c_reap_elegy : string "<REAP ELEGY<#88f>>" ;
   c_no_trouble : string "<NO TROUBLE<#88f>>" ;

   yn_or_12_or_14 : dynamic_string {( (verb_is "save" || verb_is "load") ? "Please choose from 1 to 4." : in_number_choice ? "Please choose 1 or 2." : "Please choose YES/Y or NO/N." )}
   my_score : string "{score}{conditional_score}/{max_score}" ;
   conditional_score : dynamic_string {( to_think > 0 ? "+{to_think}" : "" )} ;
   to_think_words : dynamic_string {( collection_get{ collection -> ("num_to_word") index -> ( to_think ) } )} ;

   # options
   c_oaf_aid : string "<OAF AID<#f0f>>" ;
   c_oh_fade : string "<OH FADE<#f0f>>" ;

   # verbs
   v_listen : string "<LISTEN<#0f0>>" ;

   # meta-verbs
   vm_about : string "<ABOUT<#f80>>" ;
   vm_credits : string "<CREDITS<#f80>>" ;
   vm_verbs : string "<VERBS<#f80>>" ;
   vm_versions : string "<VERSIONS<#f80>>" ;

   # diagnostic verbs
   vd_hint : string "<HINT<#f80>>" ;
   vd_think : string "<THINK<#f80>>" ;

   # keyboard stuff
   key_enter : string "the <ENTER<#f88>>/<RETURN<#f88>> key" ;

   g_us : string "<Us Too<#0f0>>[http://andrewschultz.itch.io/us-too]" ;
   g_wp : string "<Why Pout<#0f0>>[http://andrewschultz.itch.io/why-pout]" ;

   # noting stuff
   one_time : string "<ONE-TIME NOTE: <#f0f>>" ;

   # in-game text
   rue_fear_block : string "Maybe you could go that way, but you're too scared, and you aren't in a position to see any such passage." ;
   repel_hint : dynamic_string {( think_repel_edgy && point_help_lots ? "You feel you have the support to try what failed earlier." : point_help_lots ? "How, then, to get rid of the ghost?" : "You don't feel prepared enough to tackle the ghost yet, though." )}
   oaf_stickler : string "I'm going to be a stickler and enforce the spirit of the game on you and make you type " ;

   # dynamic or long/special strings
   right_hand : dynamic_string {(oaf_aid ? oaf_shows : my_score)} ;
   once_now : dynamic_string {( once_now_boolean ? "now" : "once" )} ;
   oaf_status : dynamic_string {( unready_here ? "tentative" : "purposeful" )} ;

   # room strings
   gsgr_desc : dynamic_string {( point_duh_lies ? "The dull eyes are " + (point_help_lots ? "long since " : "") + "gone, but the ghost remains here in {gsgr}, decidedly un-silent and hard not to {v_listen} to. {repel_hint}" : "{c_dull_eyes} stare at you from behind the ghost here in {gsgr}. There's an eerie sound, too." )} ;
   rf_desc : dynamic_string {( point_roof_ere ? "You've moved on from the fear of being trapped to the fear of being ambushed from all sides, because if you can follow the passages north, south, east and west, so can predators. But it's a practical step up. You hope." : "You fear being trapped in, except for going back south to the ghost. Maybe a new perspective could help you find passages out!" )} ;
   nt_desc : dynamic_string {( point_note_rubble ? "You found everything here, you're pretty sure. There's no trouble left to make." : "You hear {c_no_trouble} ... {c_no_trouble}. What does it mean? Should you have no trouble figuring what to do? Had you better start no trouble? Or is there no potential friend who could cause good trouble here?" )} ;
   cs_desc : dynamic_string {( point_curse_treats ? "The animals you goaded into eating the cursed treats are harmless now. They probably needed some rest, anyway. Hopefully, when they wake up, they'll go back to annoying souls who deserve it." : "Canine howls echo up and down here. You see the perpetrators, and while you could take one, you'd be in trouble fighting a whole pack. They occasionally duck in and out to covered areas, licking their lips as if well-fed." )} ;
   hp_desc : dynamic_string {( point_help_lots ? "You've saved whom you can. Time to move on." : "A {wlwc} cycles around here, complaining of the drudgework they've been sentenced to for all eternity. Perhaps they did not really deserve such a harsh fate." )} ;

   # oaf strings
   oaf_aid_status : dynamic_string {( ( oaf_aid_extra ? "extended" : "regular" ) + " mode" )} ;
   oaf_gsgr : dynamic_string {( !point_duh_lies ? "3/4" : "5/4" )} ;
   oaf_hands_gsgr : dynamic_string {( !point_duh_lies ? "three fingers on one hand and four on the other" : "five fingers on one hand and four on the other" )} ;
   oaf_shows : dynamic_string {( done_here ? "DONE" : "<" + oaf_numbers + "<" + (!oaf_aid_extra ? "#fff" : unready_here ? "#ff0" : "#0f0") + ">>" )} ;
   oaf_numbers : dynamic_string {(
      is_at "go_strange_ghost_range" ? oaf_gsgr :
      is_at "rue_fear" ? "4/3" :
      is_at "no_trouble" ? "4/6" :
      is_at "cur_streets" ? "5/6" :
      is_at "hell_plots" ? "4/4" :
      "BUG" )} ;
   oaf_hands : dynamic_string {( is_at "go_strange_ghost_range" ? oaf_hands_gsgr :
      is_at "rue_fear" ? "four fingers on one hand and three on the other" :
      is_at "no_trouble" ? "four fingers on one hand and five, with a wiggly thumb, on the other" :
      is_at "cur_streets" ? "five fingers on one hand and five, with a wiggly thumb, on the other" :
      is_at "hell_plots" ? "four fingers on one hand and four on the other" :
      "BUG" )} ;

   custom_unknown_verb_error : string "Nothing comes of that. {gsgr} has a reduced verb list, which you can see with {vm_verbs}, and all point-scoring commands are irregular." ;
   exitserr : dynamic_string {( is_at "rue_fear" ? ( point_roof_ere ? "Not that way, but the four main cardinal directions work." : "The only path is back north.") : end_exits )} ;
   all_exits : dynamic_string {( is_at "rue_fear" ? ( !point_roof_ere ? "You see no exits except back north. Well, for now." : "You can go north, south, east or west." ) : end_exits )} ;
   end_exits : dynamic_string {( !point_duh_lies ? "South is the only way out, but you need to break free from the {c_dull_eyes}." : "You can only go " + (has_visited "rue_fear" ? "back " : "" ) + (is_at "no_trouble" ? "north" : is_at "hell_plots" ? "west" : is_at "cur_streets" ? "east" : "south" ) + "." )}
}

collections {
   num_to_word : list {
      items = [
         "zero",
         "one",
         "two",
         "three",
         "four",
         "five",
         "six",
         "seven"
      ]
   };
}

objects {
   oaf : scenery "an oaf" at = "go_strange_ghost_range" conspicuous="false" ;
   dude : scenery "Dude Well-Do-Dwell" conspicuous="false" ;
   wee_cloud : scenery "a {wlwc}" at = "hell_plots" conspicuous="false" ;
   curs : scenery "curs" at = "cur_streets" conspicuous="false" ;
   strange_ghost : scenery "the strange ghost" at= "go_strange_ghost_range" conspicuous="false" ;
}

vocabulary {
   : noun / aliases = [dude, well, dwell]
}

locations {
   go_strange_ghost_range : location "{gsgr_desc}" header="{gsgr}" graphic="r_go_strange_ghost_range" {
      on_command {
         : match "listen _" {
            : if (!point_duh_lies) {
               : print "The ghost is making some noise, but that's secondary to the sense of worthlessness you feel from the {c_dull_eyes}' intense gaze. Or gazes." ;
            } : else_if (!listen_elegy) {
               : print "The ghost emits a {c_reap_elegy}. Its tone and words are terrifying. Listen again for a clue what to do with it ... if you dare!" ;
               : set_true "listen_elegy" ;
            } : else {
               : cycle key = "reap_elegy_stuff" predictable_order = "true" skip_interval = "0" {
                  : print "The ghost's {c_reap_elegy} rhymes creep, deep, and even \"beep\" to block out profanity." ;
                  : print "The ghost's {c_reap_elegy} takes a weird turn. \"Elegy\"'s syllables ae stressed wrong. It is not hedge-y or on-the-ledge-y about being terror up-dredgey to mortals in a drive-a-wedgey manner. It has special scorn for people named Reggie." ;
               }
            }
            : done ;
         }
         : match "_ eyes" {
            : if (point_duh_lies) {
               : print "The eyes are no longer here." ;
            } : else {
               : print "The eyes simply stare at you, freezing you and making you feel like a much worse person than you thought you were being. And if you don't agree, why, maybe you're not trying hard enough to be objective." ;
            }
         }
         : match "duh lies" {
            : if (point_duh_lies) {
               : print "The eyes are no longer here." ;
            } : else {
               : print "You realize it isn't enough just to stare back at the dull eyes. You'll never win a staring contest. You have put meaning into your stare, and it's a tense 15 seconds, but the dull eyes finally blinking go away, maybe looking for someone easier to push around." ;
               : print "You feel less pinned to the spot now. Perhaps it's time to go check what's to the south, or you can {v_listen} to preview what you're ultimately up against." ;
               : gosub "add_point" ;
               : set_true "point_duh_lies" ;
               : update_graphic ;
            }
            : done ;
         }
         : match "duh _;_ lies" {
            : set_boolean var="done_already" {(point_duh_lies)} ;
            : gosub "reject_half" ;
         }
         : match "repel edgy" {
            : if (point_repel_edgy) {
               : print "You should have won the game already, and you shouldn't see this." ;
            } : else_if (!point_help_lots) {
               : if (!point_duh_lies) {
                  : print "No way you're dealing with the {c_reap_elegy} before the dull eyes." ;
               } :else_if (!point_note_rubble) {
                  : print "Oh, hey, that seems like a good idea, a great idea even, but there's no way you're going to be able to repel the ghost on your own." ;
               } : else {
                  : print "While {dwdd}'s companionship gives you some confidence, they look quite intimidated by the ghost. So that won't quite work out." ;
               }
               : set_true "think_repel_edgy" ;
               : gosub "note_thinks" ;
               : done ;
            } : else {
               : print "You wouldn't think the {wlwc} could help, objectively, since all of them are smaller than you. But boy does the variety and amount of their complaints disrupt the elegy in a way that your more measured responses, or {dwdd}'s strength, never could." ;
               : print {( "Even the oaf " + (oaf_aid ? "gets " : "comes from the shadows to get") + " in on the action! Their questions are just the sort that malevolent people and spirits find stupid. " )} ;
               : print "The ghost has trouble trying to pick off each single complaint, and it eventually gets frustrated realizing how impossible it is, whirling into a ball of energy and floating away." ;
               : print "You have freed {gsgr}!" ;
               : set_true "point_repel_edgy" ;
               : set_false "think_repel_edgy" ;
               : gosub "add_point" ;
               : update_graphic ;
               : press_any_key ;
               : if (!six_warn) {
                  : print "Wow! Teamwork! You apologize to the oaf for not letting it help along the way, but it assures you that the solitude gave it time to think of big questions like, should we be obliged to help? Should we feel helpful even if not asked? It's an interesting chat. You resolve to have less fear of asking potentially silly questions in real life." ;
               }
               : print "You reflect on your journey. The oaf and dude feel more useful. The {wlwc} feel as though they deserve at least limbo. Perhaps there was a clerical error. But you -- you're not ready to join the afterlife. There's just one thing: what to call this place, now the ghost is gone? It's tough, but given your successes, your companions have faith in you." ;
               : press_any_key ;
               : print "Aha! That's it!" ;
               : press_any_key ;
               : print "It was supposed to be a park, so you decide on Jog-'Round/Jaw Ground. Where people can socialize or enjoy nature. You check to make sure you haven't broken a grammatical rule too badly. But everyone nods and agrees." ;
               : press_any_key ;
               : print "It's time to depart. The oaf says it's time to be an eye-loaf-isle oaf. You reassure it it's earned it. The crowd has a more active urge: a crowdy ache, rowdy. The dude has an epiphany. \"Dude, riven?! Do!!! DRIVEN!!!\" You? Well, you have nothing concrete to do here. But you look inside yourself and find a wan tripling want, rippling. You have things to do back home. But how to get back? You see no portal back ... \"Poor ... tell port? L ...\" you mutter. Then you see it." ;
               : press_any_key ;
               : clear_screen ;
               : set_false "show_overlay" ;
               : update_graphic "s_fence_and_fen_sand" ;
               : set_true "show_overlay" ;
               : print "Fence and fen/sand." ;
               : print "You notice the part of the fence joining the fen and sand is different. You walk closer, and it swirls with magical energy." ;
               : print "There's a flash as you walk through the weak point in the fence.You walk home to your own world uneventfully. You've half forgotten your outing, until you notice a post-it on your door. It says ..." ;
               : press_any_key ;
               : clear_screen ;
               : set_false "show_overlay" ;
               : update_graphic "s_you_saw_use_aww" ;
               : set_true "show_overlay" ;
               : print "^c^<YOU SAW USE, AWW<#ff0>>\n^l^" ;
               : if (have_won) {
                  : print "And thanks for playing through again! Even though I had no new content to offer." ;
               }
               : set_true "have_won" ;
               : win_game ;
            }
            : done ;
         }
         : match "repel _;_ edgy" {
            : set_boolean var="done_already" {(point_repel_edgy)} ;
            : set_boolean var="think_already" {(think_repel_edgy)} ;
            : gosub "reject_half" ;
         }
      }
      on_describe {
         : set_false "in_number_choice" ;
         : if (!six_warn && !point_duh_lies && turns() >= 5) {
            : print "You wonder if calling the oaf, or maybe a {vd_hint}, would help you get started." ;
         }
      }
   }
   rue_fear : location "{rf_desc}" header="<Rue Fear<#f00>>" {
      on_command {
         : match "_ ghost" {
            : print "Not very visible. It's making some noise, though." ;
            : gosub "note_noun_based" ;
            : done ;
         }
         : match "listen _" {
            : print "Eer-ie silence." ;
            : done ;
         }
         : if (!point_roof_ere) {
            : match "roof ear" {
               : print "You listen to the roofs. You hope they can't hear your heart pounding. You sense you're close, but ... maybe something more informal." ;
               : done ;
            }
         }
         : match "roof ere" {
            : if (point_roof_ere) {
               : print "You found enough passages from here the first time you climbed." ;
            } : else {
               : print "You half-jokingly request a roof to come down to you. Then you think, hmm, here is how to climb one of them." ;
               : print "While the houses seem to be watching you, you realize they don't have arms or feet or anything like that, so while there still might be a bad looking around a corner, the house is themselves can't stop you. You climb on to one of them, and you see passages to the west, south, and east. When you get back down, they seem to have given up on trying to intimidate you, sort of knowing that jig is up. They're resting for the next poor soul to come this way, maybe. " ;
               : gosub "add_point" ;
               : set_true "point_roof_ere" ;
               : update_graphic ;
            }
            : done ;
         }
         : match "roof _;_ ere" {
            : set_boolean var="done_already" {(point_roof_ere)} ;
            : gosub "reject_half" ;
         }
      }
   }
   no_trouble : location "{nt_desc}" header="<No Trouble<#888>>" {
      on_command {
         : match "listen _" {
            : print {( point_note_rubble ? "Quiet. Too quiet." : "The quiet is more relaxing now." )} ;
            : done ;
         }
         : match "note rubble" {
            : if (point_note_rubble) {
               : print "You found a companion in the rubble. That's good enough." ;
            } : else {
               : print "There looks like there's nothing here, and nothing's been here. But you wonder why it looks that way. Of course there is rubble! You inspect it, for treasure or whatever, and you're surprised to see someone sleeping in a small cavern they dug out of the rubble. They introduce themselves as {dwdd}. They mention they never really did much in the pre-afterlife but were sort of just, well, there. And they've felt listless, and it was probably foolish to wait around for someone who had adventure for them, but ... they hope you do." ;
               : print "You mention you're not sure what you're here for, but there's a weird ghost to chase away. Good enough for the {dwdd}! He'll be following you from now on." ;
               : set_true "point_note_rubble" ;
               : create "dude" ;
               : gosub "add_point" ;
            }
            : done ;
         }
         : match "note _;_ rubble" {
            : set_boolean var="done_already" {(point_note_rubble)} ;
            : gosub "reject_half" ;
         }
      }
   }
   cur_streets : location "{cs_desc}" header="<Cur Streets<#f00>>" graphic="r_cur_streets" {
      on_command {
         : match "listen _" {
            : print {( point_curse_treats ? "The snoring's pretty obnoxious, but compared to the alternative, it's great." : "Supernatural canine yapping probably meant to give all near a headache." )} ;
            : done ;
         }
         : match "curse treats" {
            : if (point_curse_treats) {
               : print "The treats were already cursed with lethargy. You don't need to maintain or increase the curse." ;
            } : else_if (!point_note_rubble) {
               : print "You're too benign to provide a curse." ;
               : set_true "think_curse_treats" ;
               : gosub "note_thinks" ;
            } : else {
               : print "Cursing the treats seems the way to go, but it might be inhumane, or whatever passes for inhumane in the afterlife, to actually kill the dogs, or whatever passes for killing in the afterlife." ;
               : print "Fortunately, {dwdd} has an idea. He explains that many people told him that his curse of laziness was something that could spread to other people as well. He sort of remembered how it happened, and he thinks he can pull it off again, with some luck. It's worth a try." ;
               : print "And what do you know? The first dogs who wolf down the treats look a little groggy then fall over you can see them breathing, so they're not dead, but they're not going to stop you from anything you might need to do soon." ;
               : gosub "add_point" ;
               : set_true "point_curse_treats" ;
               : set_false "think_curse_treats" ;
               : update_graphic ;
            }
            : done ;
         }
         : match "curse _;_ treats" {
            : set_boolean var="done_already" {(point_curse_treats)} ;
            : set_boolean var="think_already" {(think_curse_treats)} ;
            : gosub "reject_half" ;
         }
      }
   }
   hell_plots : location "{hp_desc}" header="<Hell Plots<#f00>>" graphic="r_hell_plots" {
      on_command {
         : match "listen _" {
            : print {( point_help_lots ? "You faintly hear the cries of souls who have it worse than the {wlwc}. They sound terrible, and yet, you also cringe at the thought of the {wlwc} being told \"you know, there are spirits who have it worse than you. Buck up!\"" : "The {wlwc} just keep moaning and moaning about how they feel trapped." )} ;
            : done ;
         }
         : match "help lots" {
            : if (point_help_lots) {
               : print "You've already helped the {wlwc} enough. They're following you, after all." ;
            } : else_if (!point_curse_treats) {
               : print "Canine howls from the west leave you too fearful." ;
               : set_true "think_help_lots" ;
               : gosub "note_thinks" ;
            } : else {
               : print "The {wlwc} seems only to want to moan to you about how unfairly they were judged in the afterlife at first. But you, with {dwdd}, manage to persuade them that there might still be a way out. It isn't something you could have done alone, but {dwdd} is an impressive fellow, a lot bigger than you, and even if he doesn't yell, he uses his weight too be impressive and the sort of entity you just don't talk back to.";
               : print "The {wlwc} admits to fear of ... dog guardians that kept them out. But you assure them those are taken care of. They promise to help you in return for freeing them from the doldrums, no matter what!" ;
               : print "You've got a full posse now!" ;
               : gosub "add_point" ;
               : set_true "point_help_lots" ;
               : set_false "think_help_lots" ;
            }
            : done ;
         }
         : match "help _;_ lots" {
            : set_boolean var="done_already" {(point_help_lots)} ;
            : set_boolean var="think_already" {(think_help_lots)} ;
            : gosub "reject_half" ;
         }
      }
   }
}

connections {
   from, direction, to = [
      go_strange_ghost_range, south, rue_fear,
      rue_fear, south, no_trouble,
      rue_fear, west, cur_streets,
      rue_fear, east, hell_plots
   ]
}

barriers {
   block_ghost_south_0 : block {
      location = rue_fear
      block_when_not = point_duh_lies
      message = You must face the dull eyes!
   }
   block_ghost_south_end : block {
      location = rue_fear
      block_when = db_at_the_end
      message = No, your destiny is here. You have the support you need!
   }
   block_rue_fear_w : block {
      location = cur_streets
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   block_rue_fear_e : block {
      location = hell_plots
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   block_rue_fear_s : block {
      location = no_trouble
      block_when_not = point_roof_ere
      message = {rue_fear_block}
   }
   done_rue_fear_w_2 : block {
      location = cur_streets
      block_when = point_help_lots
      message = No, you have everyone you need. Time to revisit the ghost!
   }
   done_rue_fear_w : block {
      location = cur_streets
      block_when = point_curse_treats
      message = You already took care of Cur Streets. No need to go back.
   }
   done_rue_fear_e : block {
      location = hell_plots
      block_when = point_help_lots
      message = You already took care of Hell Plots. No need to go back.
   }
   done_rue_fear_s_2 : block {
      location = no_trouble
      block_when = point_help_lots
      message = No, you have everyone you need. Time to revisit the ghost!
   }
   done_rue_fear_s : block {
      location = no_trouble
      block_when = point_note_rubble
      message = You already took care of No Trouble. No need to go back.
   }
}

subroutines {
   meta_about : subroutine {
      : print "{gsgr} was written for {ecomp} Petite Mort 2025." ;
      : print "I used Python scripts to generate a lot of the code to keep the development time under 4 hours." ;
      : print "I'm grateful to the organizers for not having image creation time count against these four hours." ;
      : print "{gsgr} has the same mechanic as two games I wrote in Inform 7: {g_wp} and {g_us}." ;
      : print "{gsgr} is meant to be a fairly straightforward game with five rooms and six points to score. I realized that the first two puzzles probably had more slang than the next ones, but {vd_hint}s can help non-English speakers." ;
      : print "Every point scoring command is an unusual verb, which it is indicated by the location, or something in the location." ;
      : print "Some text is color-coded. <Green<#0f0>> is a clickable link, and <Orange<#f80>> or purple indicates a verb you can use. <Lavender<#88f>> text clues what to focus on." ;
   }

   meta_credits : subroutine {
      : print "Thanks to the administrators Ruber Eaglenest and Alyshkalia for holding {ecomp}, as well as former administrators like JJ Guest and Duncan Bowsman." ;
      : print "Thanks to Chris Ainsley for creating Adventuron." ;
      : print "Thanks to Billy Argel for his DripInk font which I used in the game map." ;
      : print "I had no time for testers, alas, but if you find a bug, you can get your name here!" ;
   }

   meta_verbs : subroutine {
      : print "Many standard verbs aren't useful here. Also, there are no diagonal directions, or up or down." ;
      : print "{vd_think} is a useful verb, if you got a command right, but you hadn't prepped properly in-game yet." ;
      : print "<HELP<#f80>> and <HINT<#f80>> are available in the first two rooms, where the slanginess may be slightly confusing for players whose first language is not English." ;
      : print "{c_oaf_aid} and {c_oh_fade} toggle the oaf's help on and off. Using {c_oaf_aid} when it is on toggles whether or not the oaf also clues whether you can do something right now." ;
      : print "You can learn about {gsgr}'s creation with {vm_about}, {vm_credits} and {vm_versions}." ;
   }

   meta_versions : subroutine {
      : print "Version 1 was released for {ecomp} on itch.io on October 30, 2025." ;
   }
   note_noun_based : subroutine {
      : if (noun_based_noted) {
         : return ;
      }
      : print "{one_time}{gsgr} tends to look at the noun more than the verb, so it will probably funnel most verbs to <X<#f80>>/<EXAMINE<#f80>>. There's enough verb guessing with the actual puzzles." ;
      : set_true "noun_based_noted" ;
   }

   note_thinks : subroutine {
      : if (!think_note_yet) {
         : print "{one_time}{vd_think} will track any command that will score points at a later time. Also, the status line in the upper left will show +1 or more, for commands you've guessed right but still need prep for." ;
         : set_true "think_note_yet" ;
      }
   }

   reject_half : subroutine {
      : if (done_already) {
         : print "One word's wrong, but you already did that fully." ;
      } : else_if (think_already) {
         : print "One word's wrong, but you already figured what to do fully. See {vd_think} for a refresher." ;
      } : else {
         : print "Something almost happens. One word must be right." ;
      }
      : done ;
   }
   add_point : subroutine {
      : print "<Your score has just gone up by a point!<#ff0>>" ;
      : increment "score" ;
      : update_graphic ;
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text ;
         : dynamic_text "right_hand" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = #222
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not right here and now.
   not_present = You can't see ${entity} here.
   ask_new_game                                   = Would you like to restart {gsgr}?
   ask_quit                                       = Do you wish to quit {gsgr}?
   invalid_choice                                 = {yn_or_12_or_14}
   post_quit = I hope you enjoyed the experience. Pressing {key_enter} will restart {gsgr}.
   unknown_verb                                   = {custom_unknown_verb_error}
   you_cant_go_that_direction                     = {exitserr}
      }
   }
}

on_render {
   : if (showing_map) {
      : overlay "m_visited" x="203" y="1" ;
      : overlay "m_t_gsgr" x="204" y="2" ;
      : if (!point_duh_lies) {
         : overlay "m_v_notyet" x="248" y="43" ;
      } : else_if (is_at "go_strange_ghost_range" && point_help_lots) {
         : overlay "m_v_done" x="248" y="43" ;
      } : else {
         : overlay "m_v_cango" x="248" y="43" ;
      }
      : if (has_visited "cur_streets") {
         : if (!point_curse_treats) {
            : overlay "m_visited" x="1" y="83" ;
         } : else {
            : overlay "m_complete" x="1" y="83" ;
         }
         : overlay "m_t_cur_streets" x="2" y="84" ;
         : if (is_at "cur_streets") {
            : overlay "m_here" x="92" y="84" ;
         }
      }
      : if (has_visited "hell_plots") {
         : if (!point_help_lots) {
            : overlay "m_visited" x="405" y="83" ;
         } : else {
            : overlay "m_complete" x="405" y="83" ;
         }
         : overlay "m_t_hell_plots" x="405" y="84" ;
         : if (is_at "hell_plots") {
            : overlay "m_here" x="496" y="84" ;
         }
      }
      : if (has_visited "no_trouble") {
         : if (!point_note_rubble) {
            : overlay "m_visited" x="203" y="165" ;
         } : else {
            : overlay "m_complete" x="203" y="165" ;
         }
         : overlay "m_t_no_trouble" x="204" y="166" ;
         : if (is_at "no_trouble") {
            : overlay "m_here" x="294" y="166" ;
         }
      }
      : if (is_at "go_strange_ghost_range") {
         : overlay "m_here" x="294" y="2" ;
      }
      : if (!has_visited "rue_fear") {
         : done ;
      }
      : if (!point_help_lots || is_at "hell_plots") {
         : overlay "m_visited" x="203" y="83" ;
      } : else {
         : overlay "m_complete" x="203" y="83" ;
      }
      : overlay "m_t_rue_fear" x="204" y="84" ;
      : if (is_at "rue_fear") {
         : overlay "m_here" x="294" y="84" ;
      }
      : if (!point_roof_ere) {
         : overlay "m_h_notyet" x="103" y="98" ;
         : overlay "m_h_notyet" x="305" y="98" ;
         : overlay "m_v_notyet" x="248" y="125" ;
         : done ;
      }
      : if (!point_curse_treats || is_at "cur_streets") {
         : overlay "m_h_cango" x="103" y="98" ;
      } : else {
         : overlay "m_h_done" x="103" y="98" ;
      }
      : if (!point_help_lots || is_at "hell_plots") {
         : overlay "m_h_cango" x="305" y="98" ;
      } : else {
         : overlay "m_h_done" x="305" y="98" ;
      }
      : if (!point_note_rubble || is_at "no_trouble") {
         : overlay "m_v_cango" x="248" y="125" ;
      } : else {
         : overlay "m_v_done" x="248" y="125" ;
      }
      : done ;
   }
   : if (!show_overlay) {
      : done ;
   }
   : if (oaf_aid || point_repel_edgy) {
      : overlay "o_oaf" x="0" y="20" ;
   }
   : if (is_present "dude" && is_present "wee_cloud") {
      : if (is_at "go_strange_ghost_range") {
         : overlay "o_dude" x="84" y="17" ;
         : overlay "o_wlwc" x="150" y="20" ;
      } : else {
         : overlay "o_dude" x="96" y="17" ;
         : overlay "o_wlwc" x="138" y="20" ;
      }
   } : else_if (is_present "dude") {
         : overlay "o_dude" x="116" y="17" ;
   } : else_if (is_present "wee_cloud") {
         : overlay "o_wlwc" x="108" y="20" ;
   }
   : if (is_at "go_strange_ghost_range") {
      : overlay "o_ghost" x="116" y="10" ;
      : if (score == 0) {
         : overlay "o_exclam_red" x="0" y="0" ;
         : overlay "o_dull_eyes" x="58" y="2" ;
         : overlay "o_dull_eyes" x="22" y="10" ;
         : overlay "o_dull_eyes" x="122" y="1" ;
         : overlay "o_dull_eyes" x="223" y="11" ;
         : overlay "o_dull_eyes" x="157" y="13" ;
      } : else_if (score == 1) {
         : overlay "o_exclam_orange" x="0" y="0" ;
      } : else_if (score == 2) {
         : overlay "o_exclam_yellow" x="0" y="0" ;
      } : else_if (score == 3) {
         : overlay "o_exclam_green" x="0" y="0" ;
      } : else_if (score == 4) {
         : overlay "o_exclam_blue" x="0" y="0" ;
      } : else_if (score == 5) {
         : overlay "o_exclam_purple" x="0" y="0" ;
      }
   }
   : if (is_at "cur_streets") {
      : if (!point_curse_treats) {
         : overlay "o_dog" x="40" y="16" ;
         : overlay "o_dog" x="80" y="12" ;
         : overlay "o_dog" x="160" y="16" ;
         : overlay "o_dog" x="200" y="12" ;
      } : else {
         : overlay "o_dog_sleep" x="40" y="19" ;
         : overlay "o_dog_sleep" x="80" y="15" ;
         : overlay "o_dog_sleep" x="160" y="19" ;
         : overlay "o_dog_sleep" x="200" y="15" ;
      }
   }
}

on_startup {
   : print "{gsgr}, by Andrew Schultz" ;
   : print "{gsgo}" ;
   : print "Submitted to the 2025 {ecomp} Petite Mort" ;
   : if (have_won && !win_warn) {
      : print "{one_time}There's nothing new to be found on replay, if you're wondering. But thanks for checking. Go try the other {ecomp} games! Whether or not it's over now!" ;
      : set_true "win_warn" ;
   }
   : press_any_key ;
   : print "You're too old for Halloween scariness and silliness, of course. But you still fear ten-cent library fines when books are a day overdue. It's more the nuisance of tracking down change lying around, really." ;
   : press_any_key ;
   : print "A couple books were due today. The library's closed now, but if you return the books in the drop before it opens tomorrow, you won't get fined." ;
   : press_any_key ;
   : print "You're not sure why you picked these two books, but you got ironic enjoyment from them: <The Switch-Thus Witch<#ff0>>, <Cruel-Itches-Crew Liches<#ff0>> and <Wight-Ail-Why Tale<#ff0>>. Such silliness! Things never happen that way." ;
   : press_any_key ;
   : print "You take a shortcut back through a mini-forest preserve in a city park. It's maybe four blocks square. But it's taking too long to get out. What is going on?" ;
   : press_any_key ;
   : print "Ah, there, things are opening up. But you don't recognize where you are, and there's a strange ghost. You can't face it alone!" ;
   : press_any_key ;
   : print "But wait. There is somebody. \"I'm just an oaf,\" they say, \"I have powers to help you, but only if you call for {c_oaf_aid}. We need someone to perform a... a...\"" ;
   : print "There's an awkward pause, then ..." ;
   : print "\"{gsgo}!!!\"" ;
   : press_any_key ;
}

on_tick {
   : if (!showed_first_note) {
      : print "{one_time}{vm_about} will give general game information. {vm_verbs} will describe {gsgr}'s stripped-down parser." ;
      : set_true "showed_first_note" ;
   }
}

on_pre_describe {
   : if (linger() == 0) {
      : if (oaf_aid) {
         : create "oaf" ;
      }
      : if (point_note_rubble) {
       : create "dude" ;
      }
      : if (point_help_lots) {
       : create "wee_cloud" ;
      }
   }
}

on_describe {
   : if (point_note_rubble) {
      : print {( "{dwdd} " + (point_help_lots ? " and the {wlwc} " : "") + (linger() > 0 ? "stand{pals} by you" : "follow{pals} you") + " loyally." )} ;
   }
}

on_pre_command {
}

on_command {
   : match "z _;wait _" {
      : print "\"Loaf, right? Lo, fright!\"" ;
      : if (!wait_yet) {
         : print "{note_once}This is just a silly general response. Waiting gives no penalty or benefit." ;
         : set_true "wait_yet" ;
      }
   }
   : match "map _" {
      : set_true "showing_map" ;
      : clear_screen ;
      : update_graphic "m_blank" ;
      : if (!map_dotted_notes && !point_help_lots && (point_roof_ere || !point_duh_lies)) {
         : set_true "map_dotted_notes" ;
         : print "{one_time}dotted lines mean a passage you know about but can't follow yet." ;
      }
      : if (point_note_rubble && !map_black_note) {
         : print "{one_time}any room that is black on the map is complete. You won't be able to return to it, but you won't need to." ;
         : set_true "map_black_note" ;
      }
      : if (!first_map_note) {
         : print "You can mouse-click or hit ENTER to return to the game." ;
         : set_true "first_map_note" ;
      }
      : press_any_key ;
      : set_false "showing_map" ;
      : redescribe ;
      : done ;
   }
   : if (is_present "wee_cloud") {
      : match "_ weak;_ loud;_ wee;_ cloud" {
         : print {( point_help_lots ? "Restless with anticipation of bettering themselves/itself." : "Fidgety and moaning about its fate in the afterlife." )} ;
         : print "You're not sure how many souls make it up. I mean, I know there are thirteen in the graphic, but I'm working with limited resolution, here." ;
         : gosub "note_noun_based" ;
      }
   }
   : if (is_present "dude") {
      : match "_ dude" {
         : print "Waiting for you." ;
         : gosub "note_noun_based" ;
         : done ;
      }
   }
   : match "_ oaf" {
      : if (!oaf_aid) {
         : print "But the oaf is not available. {c_oaf_aid} will toggle its appearance on." ;
      } : else_if (done_here) {
         : print "The oaf applauds. You must be done here." ;
      } : else {
         : print "The oaf looks {oaf_status} while holding up {oaf_hands}." ;
      }
      : gosub "note_noun_based" ;
   }
   : match "score _" {
      : print "You have scored {score} of {max_score} points so far." ;
      : if (to_think > 0) {
         : print {( "You have {to_think_words} command" + ( to_think > 1 ? "s" : "") + " you figured, but you didn't have enough support to succeed. {vd_think} will show the details." )} ;
      }
      : if (!bonus_note) {
         : print "{one_time}{gsgr} contains no hidden bonus points." ;
         : set_true "bonus_note" ;
      }
   }
   : match "sw _;se _;ne _;nw _" {
      : print "Diagonal directions aren't used in {gsgr}." ;
      : done ;
   }
   : match "u _;d _" {
      : print "Vertical directions aren't used in {gsgr}." ;
      : done ;
   }
   : match "enter _;exit _;in _;out _" {
      : print "You don't need to go in or out in {gsgr}." ;
      : done ;
   }
   : match "exits _" {
      : print "{all_exits}" ;
      : done ;
   }
   : match "about _" {
      : gosub "meta_about" ;
      : done ;
   }
   : match "credits _; credit _" {
      : gosub "meta_credits" ;
      : done ;
   }
   : match "verbs _;verb _" {
      : gosub "meta_verbs" ;
      : done ;
   }
   : match "versions _;version _" {
      : gosub "meta_versions" ;
      : done ;
   }
   : match "hint _;help _" {
      : if (done_here) {
         : print "You are done here." ;
         : done ;
      }
      : if (unready_here) {
         : print "There's more to do here, but you're not ready yet." ;
         : done ;
      }
      : if (is_at "rue_fear") {
         : cycle key = "rue_fear_hints" predictable_order = "true" skip_interval = "0" {
            : print "The location is what you need to work with here, as opposed to something in it. " ;
            : print "There's a bit of slang, but also, the words are short enough, you may be able to figure it out " ;
            : print "Rue becomes roof." ;
            : print "But what does the rest become? Ear doesn't quite make sense." ;
            : print "If you drop the letter, though, you will see that you get <ROOF ERE<#88f>>." ;
            : print "" ;
         }
         : done ;
      }
      : if (is_at "go_strange_ghost_range") {
         : if (!point_duh_lies) {
            : cycle key = "gsgr_hints_1" predictable_order = "true" skip_interval = "0" {
               : print "You may notice something about the title of the game. " ;
               : print "You may also notice something about the commands to have the oaf help or not. " ;
               : print "You may also remember the names of the books you laughed at in the introduction. " ;
               : print "You will notice that there is a pattern of two pairs of words that sound the same combined, but each one is spelled and pronounced different. The term for this is oronym." ;
               : print "The dull eyes are stopping you from going south. You need to do something to talk back against them. " ;
               : print "What two words together sound like dull eyes?" ;
               : print "The first one's a bit slangy." ;
               : print "<DUH LIES<#88f>>." ;
            }
         } : else {
            : cycle key = "gsgr_hints_2" predictable_order = "true" skip_interval = "0" {
               : print "The {c_reap_elegy} pulses through everywhere, and you need to shut it down, somehow. " ;
               : print "You need to have everyone with you, and you do, so what is a good way to get rid of it? " ;
               : print "It seems to think it's cleverer than it is, and maybe you need to take a few risks, too." ;
               : print "If you {v_listen} to it, you will gain some clues. What is being rhymed?" ;
               : print "<REPEL EDGY<#88f>>." ;
            }
         }
         : done ;
      }
      : print "Due to {ecomp}'s time limits for programming, there is no hinting in the dead end areas beyond whether or not the right command can score a point." ;
      : done ;
   }
   : match "think _" {
      : if (!thought_any) {
         : print "You haven't thought of any point-scoring commands to try later." ;
         : done ;
      }
      : if (think_curse_treats) {
         : set_boolean var="once_now_boolean" {( point_note_rubble )} ;
         : print "You can <CURSE TREATS<#f80>> {once_now} you have someone cursed to help you." ;
      }
      : if (think_help_lots) {
         : set_boolean var="once_now_boolean" {( point_curse_treats )} ;
         : print "You can <HELP LOTS<#f80>> {once_now} you have gotten rid of the distraction." ;
      }
      : if (think_repel_edgy) {
         : set_boolean var="once_now_boolean" {( point_help_lots )} ;
         : print "You can get rid of the ghost for good with <REPEL EDGY<#f80>> {once_now} you have enough support." ;
      }
   }
   : match "oaf aid" {
      : if (!oaf_aid) {
         : print {( "{c_oaf_aid} is now on, in {oaf_aid_status}. The oaf reappears." )} ;
         : set_true "oaf_aid" ;
         : if (!six_warn) {
            : print "{one_time}the oaf informs you that it is a terrible speller, but it has been blessed with knowing how many letters are in the actions you need to perform. Since it only has five fingers on one hand, wiggling their thumb counts as two fingers. Resourceful, especially for an oaf!" ;
            : set_true "six_warn" ;
         }
         : update_graphic ;
      } : else {
         : set_boolean var="oaf_aid_extra" {(!oaf_aid_extra)} ;
         : print {( "{c_oaf_aid} is now switched to {oaf_aid_status}. The oaf makes itself " + ( oaf_aid_extra ? "more" : "less" ) + " prominent." )} ;
       }
      : done ;
   }
   : match "oh fade" {
      : print {( "{c_oaf_aid} is " + (oaf_aid ? "now" : "already") + " off." )} ;
      : set_false "oaf_aid" ;
      : update_graphic ;
      : done ;
   }
   : match "oaf _" {
      : print "{oaf_stickler} {c_oaf_aid}.";
   }
   : match "oh _" {
      : print "{oaf_stickler} {c_oh_fade}.";
   }
}

assets {
   graphics {
   # overlays
      o_dull_eyes : base64_png "iVBORw0KGgoAAAANSUhEUgAAAA4AAAAGAgMAAACOdUcvAAAACVBMVEX///9gYGDAwMAVgKX3AAAAAXRSTlMAQObYZgAAABxJREFUCB1j0GrQamBYtWDVAoalC5ZCCTAXJAEAwOwM5cUDKHwAAAAASUVORK5CYII=" ;
      o_ghost : base64_png "iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAABGklEQVR4nMWXXRKDIAyEl07vFY7m0cjJ6EMbB0KoAfzZJ3TQj90gYNi2DU/o9QgVwHv2wRhjlnZKKVwKLmEAQETSrO57BuIGC7SAWQMAMyPGmI/gQzW2oDN9AIdjHS8AhPA1k3M2r4fBApGY/sXbEzO7+u1Rl87KtgXNOVfu9PXw5BKITJARpz3pUsmgzBq7gEGZMuqrS1WWoZrV3vp4dDQ/dvDM6jMLBVTUP7ivtgefjn6HTtNcQFYiJ6Ku0zLVBnxm5CLLyPTuNArUhrpgZh5asXrQXoImOKUUrDX6DKDo1BOIF9oFz7r1QrtgYGxHmlEDXnG7BAaud9uA73LbgIF73JrgVXlTM48+sxpJq3J8RsxE5DLx2L/TBzwYkZzDG+xNAAAAAElFTkSuQmCC" ;
      o_exclam_red : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA6ElEQVR4nO3bQQrDMAxFwaj0/ld2V11k15iCJf7MCURsHvIitda6gEyv0wMA5wgABBOAqarWVXX+/dZlDrYIAAQTAAgmAE9ZeXtyLlsEAIIJAAR7nx7gZ9/1bq06PEkPXb5Dlzm6GHZPbQBTdXnzdpmDLQIAweY8AbrostqZ467LHMPYAJ6y8vbkXLYIAAQrvwNDrjkbgBWPCYbd0zkBAP7OEwCC2QAgmABAMAGAYAIAwQQAggkABBMACCYAEEwAIJgAQDABgGACAMEEAIIJAAQTAAgmABBMACCYAEAwAYBgAgDBBACCfQDa7S9XC/xzSwAAAABJRU5ErkJggg==" ;
      o_exclam_orange : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA6klEQVR4nO3bQQrDMAxFwbj03iEnd1dddJeYgiX+zAlEbB7yImPOeQCZXrsHAPYRAAgmAF1dYx7X2P9+qzIHSwQAggkABBOAp6y8NTmXJQIAwQQAgr13D3Dbd70759g8SQ1VvkOVOapodk9tAF1VefNWmYMlAgDB+jwBqqiy2pnjV5U5mrEBPGXlrcm5LBEACDb8Dgy5+mwAVjw6aHZP+wQA+DtPAAhmA4BgAgDBBACCCQAEEwAIJgAQTAAgmABAMAGAYAIAwQQAggkABBMACCYAEEwAIJgAQDABgGACAMEEAIIJAAQTAAj2AegGNleAkCC0AAAAAElFTkSuQmCC" ;
      o_exclam_yellow : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA5klEQVR4nO3bMYrDMBBA0Tjs/a+sFCHFdhuzoBH/PXA/WOYzKnyttR5A03P3AMA+AgBhAnCsa72f3abMwR0CAGECAGEC8DUr70zO5Q4BgDABgLCf3QP83We9W9feOaaY8h6mzDHFWd+pDeBYU+68U+bgDgGAsIOuAFNMWe3M8duUOc5iA/ialXcm53KHAEDY5Xdg6DpoA7DicYKzvtODAgD8N1cACLMBQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQJgAQNgLCm4nSWDeFFgAAAAASUVORK5CYII=" ;
      o_exclam_green : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA6UlEQVR4nO3bMQ4CMQxFwRhx/yuHioIOIqTY+jMnsDbRk1Ns7b0XkOlxewDgHgGAYAIwVK3ater6+63LHJwRAAgmABBMAH5k5e3JuZwRAAgmABDseXuAb73Xu7123Z6lgy7focscXUy7pzaAobq8ebvMwRkBgGBjngBddFntzPGpyxzT2AB+ZOXtybmcEQAIVn4HhlxjNgArHhNMu6djAgD8nycABLMBQDABgGACAMEEAIIJAAQTAAgmABBMACCYAEAwAYBgAgDBBACCCQAEEwAIJgAQTAAgmABAMAGAYAIAwQQAggkABHsB4vsvVw8c1S0AAAAASUVORK5CYII=" ;
      o_exclam_blue : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA6UlEQVR4nO3bMQ4CMQxFwRhx/yuHioIOIqTY+jMnsDbRk1Ns7b0XkOlxewDgHgGAYAIwVNXaVev6+63LHJwRAAgmABBMAH5k5e3JuZwRAAgmABDseXuAb73Xu71X3Z6lgy7focscXUy7pzaAobq8ebvMwRkBgGBjngBddFntzPGpyxzT2AB+ZOXtybmcEQAIVn4HhlxjNgArHhNMu6djAgD8nycABLMBQDABgGACAMEEAIIJAAQTAAgmABBMACCYAEAwAYBgAgDBBACCCQAEEwAIJgAQTAAgmABAMAGAYAIAwQQAggkABHsB6wkvV8/hDe4AAAAASUVORK5CYII=" ;
      o_exclam_purple : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAA6ElEQVR4nO3bMQrEMAxFQXvZ+1/ZqbZItzEBS/yZE4jYPOQic601gEyf0wMA5wgABBOAruZYY47z77cqc7BFACCYAEAwAXjKyluTc9kiABBMACDY9/QAf/utd2vMw5PUUOU7VJmjimb31AbQVZU3b5U52CIAEKzPE6CKKqudOe6qzNGMDeApK29NzmWLAECw6XdgyNVnA7Di0UGze9onAMDrPAEgmA0AggkABBMACCYAEEwAIJgAQDABgGACAMEEAIIJAAQTAAgmABBMACCYAEAwAYBgAgDBBACCCQAEEwAIJgAQTAAg2AUSfCdJdj47ugAAAABJRU5ErkJggg==" ;

      o_dog : base64_png "iVBORw0KGgoAAAANSUhEUgAAABkAAAAUCAYAAAB4d5a9AAAAtklEQVR4nL1UQRKEIAxLd3yYvgx5mfwsHnZlEChWdOkMl9o0iYWCJNKzzmCea520XsN+MCBOJH4Ruo3S08gvQhPJm41VErdRrECNrIafrOBUiFa/hl9NlheyFN7jBgBcAPxcCmo6uRspAQCIfMUWg+91oQVJOf2uJwQuFN3j7CLJmw7yyzHlH1sP8kqIhrs1+FqTQ9Tli+9dJ1bc+AUJ9K+WFm6Mk3/PAxjkREjG+58qq+XysOJ2r823onbUOvoAAAAASUVORK5CYII=" ;
      o_dog_sleep : base64_png "iVBORw0KGgoAAAANSUhEUgAAABoAAAAUCAYAAACTQC2+AAAAqElEQVR4nN2UXQ7DIAyD7WoHy042OFl3M++BZR1p99MOeJilqgqK+BpsSklw5TMFAJdZ3Kqj9vRPcSE2vYLs7V+BemkYCJKqJxn0rj7a/39HR4+3R7OVYvpOTTe/PhWkoAXWFJStrhMp3WEPjz5dzKMiiyVdwuBHKADJiv9dQNkKLNuy1m0ihwHFlirev/q0dUV8z7F/hhbTfAVqJf/Y+AaAacQ0wECPbgGNn0hbF9peAAAAAElFTkSuQmCC" ;

      o_oaf : base64_png "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUBAMAAAB/pwA+AAAAD1BMVEXAwMAAAACAgP//AID///+6JDSkAAAAAXRSTlMAQObYZgAAAFpJREFUeF51jNENwCAIBQkbYBzg9TqCG7j/UBWl6VefiRwXwP7i9SUKRGnYpIWTmSO8lpwHkCnxioiNMnpvWtXkRDTyMJWFfo98BzMUfnaUrT1kh73Is3Bk9Q+cmQyJYIntdAAAAABJRU5ErkJggg==" ;

      o_dude : base64_png "iVBORw0KGgoAAAANSUhEUgAAABcAAAAXBAMAAAASBMmTAAAAFVBMVEXAwMAAAACAAACAQADQsJD/AAD///9sCO58AAAAAXRSTlMAQObYZgAAAHdJREFUeF5lzrENhDAMBVBbugH8G4/AAkipKbLC0af5+49A7BzmJH6Dn/yNIpFP7/l9oUeOH9RJyA1u23hA/uF7FsRJK6ijZoAD9rSqp76zNSzA28zqqSUMCVnQAGTe7BMWrftvSOQmAckbWnQsEZsYa5NZN6+3XaLIGv43DLK/AAAAAElFTkSuQmCC" ;

      o_wlwc : base64_png "iVBORw0KGgoAAAANSUhEUgAAAB4AAAAUCAYAAACaq43EAAAAwklEQVR4nL2WSxKEIAxEacp7cXU4GbNCGSZfk5psRMS0nUcs0Hsvlmitzf0eQJlzkmvHGNDyXV5R4Mm5xtwHSFE9opQIJXq+4xaWEmguNXHV8R5nadd1L79VnGVs4RrhTTq2co3wdpWac/OG96UtWP1KcZXmtWAdA7i5Rcacqco98HK18CaFufByDe1qrV+981R8bS5vv0b6u5by8M3iauFNljqLq8T7RziLK+d+BfuvzuZ6Hg7YdvpLH0tHlQyuVP4PCt8AQQfLtKIAAAAASUVORK5CYII=" ;

   # rooms
      go_strange_ghost_range : dynamic_graphic {( point_repel_edgy ? "r_go_strange_ghost_range" : "r_go_strange_ghost_range_end" )} ;
      r_go_strange_ghost_range : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEUAAEAAgACAQAAA/wD//wAtco8IAAABBklEQVR4XuxVAQbAMBBrGACSH/X/rxotouiYdrviAsTJkuXUlYZE4grgJ6JG8Pz1bCGRyEfw8w1C9E0SSyzwcoDNfpAmdmLfB8f9iCv7tx6N21kc9B5AnXJzA+JTA9WDwsYhN7bwwqyHE/XvaxJV4gcN2FASbWcMDThHEy7AegyJDmvgLoeMcgAEYRjKFcxugCeY3P9ugpHWbCaaheCH/Rm0Yby0NNVAjoOcV6EdF99rd9TtTddAawIO2nEpQfr+xey1DYDjVw0wYAO0w+J7fphX+HcNtECGNkAQADw0AI5pDSCwDdCOK68E8b4HKFsGxyAAzLcAGDMBKAKMlW/SAViOaUrlY+0loEXYYeSq+wAAAABJRU5ErkJggg==" ;
      r_go_strange_ghost_range_end : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEUAgACAQAAA/wD//wAA///MPwY5AAABCElEQVR4XuyVAQYAIRBFH+ZGdYCh7n+m3SXSkF02PuoLymSeZxRVnE8AB6DsDVDa0hnINeWahQAl3VHOwAFIT3QzUFLLBgYEM3AABC+h+i9w9W+IaQHmBnxSv7ifQzxnVGPR2BrjHoiwiQFvW1tsAHsx4AydnV7/I/1+MOAwMQC21kAAAeyLAbB9DFzlkEEKwCAMBJf8QF9g8/9HFqEyJQFaRCzQuYgbEoaVdySZd+z6GvE87LeRtHRX90GThAeL0zRExn2Fu7EBPP7UAAMaIJ6GfRooNd5VqEa2tAFEEHhoAI9NDTAIDRDPUyoiOc8CfhQ81gjwvhTg2SgACKwEAUgC0WMb8o85Ac5qSv6qfH/lAAAAAElFTkSuQmCC" ;

      rue_fear : dynamic_graphic {( point_roof_ere ? "r_rue_fear_after" : "r_rue_fear_before" )} ;
      r_rue_fear_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAJFBMVEUAAACAAAAAgADAwMAAAED/gECAgICAAP8AgP//AAD//wD/////Any1AAACaElEQVR4XuzVP0r1QBSG8aCI6io+Bhcg3B0EQ/5UFs4+LALTWliktLjNdF9hlVX6MgmcM3nA9lp4ilu8TR5+Cdzm+cL3ywLGMwO6V27TF7f2kdvwwa2ffwjImQExcltXbiFwWxZuKSHAAHIGQRcjCKZ1BUEbAgiGZQFBn9KMAAMgQdQRgARBRwASJB0CDEAEABABAEQAABEAQAQAqAmaCoAEsRwAQBDKAQAEqRwCDEAEABABAEQAABEAQAQA2AgYkPcDgA4AOgDoAKADgA4BBiACAIgAACIAgAgAIAIAeIIGADkDQAcAHQB0ANABQMcAAYBAACAQAAgEAAIBgEAAIGgAoAOADgA6AOgAoAOA7hgwNu52gs5vO8Hkt52g9dtOMPhtJ+j9Nh8Czl5g3LZXL9Bt25cXmLbt0Qu02/bhBYZtm71AXweM9SsoBF39CgrBVL+CQtDWr6AQDPUrKAR9/QrmKuBcB4wFoA7oCkAdMBWAOqAtAHVAIZjrgP74EX7qxeSsn3v7CF+0xajtxj7C/9rWVduDfYT/tIWg7co+wndty6Ltzj7CN20pabvVR4iA0+kp5+vTyQdoi1GbD9C2rtp8gLYQtPkAbcuizQdoS0kbAi4j8CfwJ3D5/wIGiOH+GCCGm2OAGB58gAiujgEiuDsGiOD2hwA9HgJ6PAT0eAooAQJKgMCWwAB7vAXY4y3AHu8DLMECLMEH7AkW8N0OGdsADIRAbAbX7Jf92DCSlWsS+k8BjSU3Z3E95zKIOJdBxLkMIs55EHHOg4hzHkTcK2ADegjoIaC/ATUE1BBQP/3ABpzC+YANuAHPvobzDXBnvQAAAABJRU5ErkJggg==" ;
      r_rue_fear_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAJFBMVEUAAACAAAAAgADAwMAAAED/gECAgICAAP8AgP//AAD//wD/////Any1AAAChElEQVR4XszVO2rkQBRGYWFj/FiFKbwAg3cgLPSIJnDtYwJBpRM4UOigE2UOHGmVc7okqHvrB6fdN3DwJ334SuDm/cJ3ZQHjSQO6D92mH93aF92GT936+ZeAddWAGHXbNt1C0G1ZdEtJAgrAugpBF6MQTNsmBG0IQjAsixD0Kc0SUACUIHIKoASBUwAlSJwEFAAIBAACAYBAACAQAAgEwBM0HoATAE4AOAHgBIATAE4CCgAEAgCBAEAgABAIAAQC4AiaCoATAE4AOAHgBIATAE4CCgAEAgCBAEAgABAIAAQCYAmaGoATAE4AOAHgBIATAE4DABACAIQAACEAQAgAEAIAhKARAE4AOAHgBIATAE4AuDpgbMwdBJ3dDoLJbgdBa7eDYLDbQdDbba4CTlZg3LcPK9Dt248VmPbtxQq0+/ZpBYZ9m61A7wNG/wSZoPNPkAkm/wSZoPVPkAkG/wSZoPdPMLuAkw8YM4AP6DKAD5gygA9oM4APyASzD+jrj/CLh1lX/jyWj/APW4xsd+Uj/GbbNran8hE+s4XAdlM+wn9sy8L2UD7Cv2wpsd3zEUrA2+3rut6+vtkAthjZbADbtrHZALYQ2GwA27Kw2QC2lNiuM+DyT0AAAi6A7SzgAtjOAj4AAQKcANs5wAmwpcR2+YDLP8F1/C/QABge6wAY7uoAGJ5sAAQ3dQAED3UABPe/BPDzIsDPiwA/rwIkiAAJIrAnaED5+RJQfr4ElJ+3ASWhBJQEF5ATTMD/dsjYBmAgBGIzuGa/7MeGkaxck9B/CmgsuTmL6zmXQcS5DCLOZRBxzoOIcx5EnPMg4l4BG9BDQA8B/Q2oIaCGgPrpBzbgFM4HbMAN9WiDXU9Lyc4AAAAASUVORK5CYII=" ;

      no_trouble : dynamic_graphic {( point_note_rubble ? "r_no_trouble_after" : "r_no_trouble_before" )} ;
      r_no_trouble_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAADFBMVEUAAACAQAAAAED//wDMiWSWAAAAvklEQVR4XmJYRSGgjgHrgJhcmnIXDLwBUB+9IpemihdGDVgNZZFDI1zwahWZNFVigXxPDJtopDAaBoMXdkFZCHppKIKPh8btgqkhWRR5YSVrQBRFBix1EAwj3gBAKXSMAyAMw1A0kcjOQO7TDt0dyb7/VRgZYEDNP8CTZdOrLKd+9wFcTusAHEBrAcRqASU7LRoALD1GA5jMtdgAAorZAopZ2AfoA26W2wBwODJ2gOdDMPeBRc2iogNUUUs/uwEeeXMXQGc1bgAAAABJRU5ErkJggg==" ;
      r_no_trouble_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEWAQAAAAED//wB6A7rAAAAATElEQVR4XmMIpRBQx4BIICaXptwLA28A1EdTyaWp4oVRA8IgDHJpBgg1NZRMmiqxQL4nhk00UhgNg8ELqRAGOfQwiUaGQQJGwSgYBQBDBi9vXKjBZgAAAABJRU5ErkJggg==" ;

      r_cur_streets : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAElBMVEUAAACAAADAwMBAIAAAAECAgICs4CpfAAAAp0lEQVR4XuzSoREAIAwEwTPpjAIiSP+tMBMQCDRv/mJerghjV4/m+NAFMMAAAwwwwAADAEIJiDqABC0ACCUgAZQ/kD0EgOirwoDuF2C1VwcnAMMwDEW9QlZwNqhG6f67hFIVDAmQUJAv/hM8dJHhjdN/gPYAbux2eajjpABgXOAI4DGIAfMAeoDHoAXMA0gB/weAeXL5gAIUoABYpbhBtgYobpBZ8gAYWp+CN43GVCsAAAAASUVORK5CYII=" ;

      r_hell_plots : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAMAAAAmJNS7AAADAFBMVEUAAACAAAAAgACAgAAAAICAAIAAgIDAwMDA3MCmyvBAIABgIACAIACgIADAIADgIAAAQAAgQABAQABgQACAQACgQADAQADgQAAAYAAgYABAYABgYACAYACgYADAYADgYAAAgAAggABAgABggACAgACggADAgADggAAAoAAgoABAoABgoACAoACgoADAoADgoAAAwAAgwABAwABgwACAwACgwADAwADgwAAA4AAg4ABA4ABg4ACA4ACg4ADA4ADg4AAAAEAgAEBAAEBgAECAAECgAEDAAEDgAEAAIEAgIEBAIEBgIECAIECgIEDAIEDgIEAAQEAgQEBAQEBgQECAQECgQEDAQEDgQEAAYEAgYEBAYEBgYECAYECgYEDAYEDgYEAAgEAggEBAgEBggECAgECggEDAgED/gAAAoEAgoEBAoEBgoECAoECgoEDAoEDgoEAAwEAgwEBAwEBgwECAwECgwEDAwEDgwEAA4EAg4EBA4EBg4ECA4ECg4EDA4EDg4EAAAIAgAIBAAIBgAICAAICgAIDAAIDgAIAAIIAgIIBAIIBgIICAIICgIIDAIIDgIIAAQIAgQIBAQIBgQICAQICgQIDAQIDgQIAAYIAgYIBAYIBgYICAYICgYIDAYIDgYIAAgIAggIBAgIBggICAgICggIDAgIDggIAAoIAgoIBAoIBgoICAoICgoIDAoIDgoIAAwIAgwIBAwIBgwICAwICgwIDAwIDgwIAA4IAg4IBA4IBg4ICA4ICg4IDA4IDg4IAAAMAgAMBAAMBgAMCAAMCgAMDAAMD/AP8AIMAgIMBAIMBgIMCAIMCgIMDAIMDgIMAAQMAgQMBAQMBgQMCAQMCgQMDAQMDgQMAAYMAgYMBAYMBgYMCAYMCgYMDAYMDgYMAAgMAggMBAgMBggMCAgMCggMDAgMDggMAAoMAgoMBAoMBgoMCAoMCgoMDAoMDgoMAAwMAgwMBAwMBgwMCAwMCgwMD/+/CgoKSAgID/AAAA/wD//wAAAP//AP8A//////8leMIQAAAClElEQVRo3tWZW3LDMAhFxWrv/nfQzjTt2ILLyyht/ZWkqoBjXkIL5UcyT3JZ+kmLrT7riPmfmsjwkxZ8FsC4vgc2/C0A9wWY9nnYct4M4CaF2Z4DEHkTBWBKNNQ5AYDpYxgD39DrZj87U4tsovcVaPrAavo/iC67LTdDlclCFys8CpLncmcAmCZj+wodserjth3j8vobXgt8SUAzD6x2/oPlhzBe9lUn5uBuJgDZ++oY7Uy42unfDFyhv3VrA1SAGLuz2JkDIJy6dubZLlBHPUggtsKgDgBbWhJHwTPNkOo2vvUxFB0CsCthu8CM/Z7/bBI2B2hVw/Wg/9ssZ/lonsAmyVFwBkCo6leuxlQCQAjnKlBcBScAGBsaUX88Aaiot0puPQ+szvu3SlOuAqgOHs340AKpqgcAON1raL9RTiqd0S4AQSJ4DoBJR6IlD9+/6wuk//LyMD03HgBACPgAnIStfQnmZojsHwbgiIepklfVHEfXsshiU5rXbg8DAG9LmP2p+LYAkM+BBrMA3C5Fi88GcpAeXbBVDWQWgHhHH/TH42H5tFUAUWoKgBeEkITwuSMhvJdg56MUgVVpAr3JzPxdCC8SRiu6nYvz7WDFA3Bvwd9ov3IBOLMJS+8mAD8FIjH9PXZNch8JoJ8GV/UUsH1B6v1DjhGAoVSFwOoeAtz+s1kKKuxYZ1A9ElQBMG9Drcb3APi10EPdAJC8guEN6IwD0DMj4rFzqhSs3Bg4nHPDu/p6Gu0w2kpEAYDckHglb0GCi1/rP+YL4N0bvHhhNrQBbEHn35U+jnseAyTolEb5UrCaBUDIvee4B8QzaVezkMBqFoDTdf7J8LhUCioA5L8AkFMATjQ6Zy5Q3g1A5E+5QAXAB0u/WLDXm1XuAAAAAElFTkSuQmCC" ;

      # endgame / cutscene graphics
      s_fence_and_fen_sand : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAFVBMVEWAAAAAgAAAAIDCsoCAQAAA/wAA//9co+zlAAABT0lEQVR4XmJQGmAwGBww6oBRB4w6YNQBThQgJgiiwAQGJRUX8pECAxhRYsioAxhcKAEODGBAiSGjDhj4NDDqgNFEOJoLAM3UzY0CMQwFYFrwwX2sxNIBBWCJ5w7s/ktY/4W5cWAisfZL4BDNfMgR19/75/m5RPC44Hn/NP8AcLZwrrYBhL8MAH0PwMgl0e+Kjx2QrQBaAAa9AVT2A2b8BGnFlLoNwL2/UqShxKCtADAgB0C9a0lGIBUGxcrMybOAW/84Fka2CNyhDhuAOhwNKN4c42WzLQABFwIggntmzaAcOgCCtJRmNn5+BFgAAQmEOQFWL02Gm2KNYAhIQgMdansA/eD8KAAi2tNPCBwNAF4ENa1j2DOCavTz572R6NztABx/GBatOwBXTMnrnjkSoaaoVoOhiubIXBBT3QG44SipXWsLg6nFUiwAY5XXKsAfAkws2I0KBdkAAAAASUVORK5CYII=" ;
      s_you_saw_use_aww : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAAAD//wCwbzSHAAAA10lEQVR4Xu3VMWoEMQyF4beCwKA+vUujUyw5QYrkPorLOYWZyrxTxg5M+rwJgcD+vT+wETLeL/ZPgAdwB3ATgVesNOANZ0HyQwScs4ytdOEKTnLUSFeBrQYmAN9dBSpqDafLwCoQEAHHWEA6HJCA9gXQ3dNkAIEJHLsIIECEk9QAgmfqIP0OMErbiggMY/dtAeIk5jWgoJGtXQCYdg2wNKYBCfUNGhdgHeI+6Gltto9DAlCQZtk5G88/B16y4mAjZeB7jDETgYGVCNzPs08nKQC3P/lcH8AnwStDf3dGzvgAAAAASUVORK5CYII=" ;

      # map graphics
      # plain/reusable
      m_blank : base64_png "iVBORw0KGgoAAAANSUhEUgAAAfwAAADQAQMAAADYhUGpAAAAA1BMVEXgwKATtJncAAAAI0lEQVR4Xu3AMQEAAADCIPuntsUuWAQAAAAAAAAAAAAAAADgNNAAASQsswUAAAAASUVORK5CYII=" ;
      m_complete : base64_png "iVBORw0KGgoAAAANSUhEUgAAAGYAAAAqAQMAAAB7i7w2AAAAA1BMVEUAAACnej3aAAAADklEQVQYGWMYBaOASgAAAkwAAY5mQOYAAAAASUVORK5CYII=" ;
      m_visited : base64_png "iVBORw0KGgoAAAANSUhEUgAAAGYAAAAqAQMAAAB7i7w2AAAABlBMVEUAAAD///+l2Z/dAAAAF0lEQVQoU2NgQAH1/xHgxyhvlEeAhwIAU4Lw8MLWXZUAAAAASUVORK5CYII=" ;
      m_here : base64_png "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAOUlEQVR4nI3KQQ4AMAgCwdX//5memhirVk5AxhBiEReyFQTYYL/lhz2OCXs+OvzADpewwi3MeIQRH1y7FAl9k0b5AAAAAElFTkSuQmCC" ;

      # connectors
      m_h_cango : base64_png "iVBORw0KGgoAAAANSUhEUgAAAGQAAAAMAQMAAACui4ogAAAABlBMVEX///8AAABVwtN+AAAAAXRSTlMAQObYZgAAABNJREFUCFtjYKAK+I8EPqDxqAIAd3QZyUHYR50AAAAASUVORK5CYII=" ;
      m_h_done : base64_png "iVBORw0KGgoAAAANSUhEUgAAAGQAAAAMAQMAAACui4ogAAAABlBMVEX///8AAABVwtN+AAAAAXRSTlMAQObYZgAAABpJREFUCJljYEtDAAYGcnn/EJz0D2g8qtgAAJ4kOLMovSJzAAAAAElFTkSuQmCC" ;
      m_h_notyet : base64_png "iVBORw0KGgoAAAANSUhEUgAAAGQAAAAMAQMAAACui4ogAAAABlBMVEX///8AAABVwtN+AAAAAXRSTlMAQObYZgAAABVJREFUCNdjYKAK+P//A4JgYqA+AAAheAjNQ8kF6AAAAABJRU5ErkJggg==" ;
      m_v_cango : base64_png "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAoAQMAAADwhomEAAAABlBMVEX///8AAABVwtN+AAAAAXRSTlMAQObYZgAAAA5JREFUCB1jZPvFOBAIAFeLKCmTlxKvAAAAAElFTkSuQmCC" ;
      m_v_done : base64_png "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAoAQMAAADwhomEAAAABlBMVEX///8AAABVwtN+AAAAAXRSTlMAQObYZgAAABdJREFUCFtjYGNgQEb/P4AQBFCXjWoRAE/HHy0VBINtAAAAAElFTkSuQmCC" ;
      m_v_notyet : base64_png "iVBORw0KGgoAAAANSUhEUgAAAAwAAAAoAQMAAADwhomEAAAABlBMVEX///8AAABVwtN+AAAAAXRSTlMAQObYZgAAABJJREFUCFtjYGNgwIpwASqpBwAigACRZsOxNAAAAABJRU5ErkJggg==" ;

      # text renderings
      m_t_cur_streets : base64_png "iVBORw0KGgoAAAANSUhEUgAAAGQAAAAoAQMAAAAyts0AAAAABlBMVEX/////AADrWueTAAAAAXRSTlMAQObYZgAAAQxJREFUKM9jYCAA2B+01CN4/L/76hvgPJnq/voDCF50XyVCToK5rxDBs2FG1mfj3I9sinVfKcIU+d99XxE8/d//kHjsr5F5jE5ftiDxHJdsaUDiqUxA5okg8zgFJuD0LiMDUaD2//zDP/79P/gBrOf///vP//7///wHiMd8/v/87z///T9vA+YdtbmX7nlpXr4ImPddbk76y1/9/jfAvP8285///DfPH6LP3k4eyJvPA+Yx2svIlhue6WP5A5bbb7e3/Oc/eT8I73+cbfnf//r8YB7TPznb0r/1/NxgfUxeHLomU1VZODXAPC4OXZWlmiwcEB4Hh4rCAg0WDgWwH6A8BgWon1QYFDgIehwAd3lpufq1pAUAAAAASUVORK5CYII=" ;
      m_t_gsgr : base64_png "iVBORw0KGgoAAAANSUhEUgAAAGQAAAAoAQMAAAAyts0AAAAABlBMVEX/////AADrWueTAAAAAXRSTlMAQObYZgAAAVtJREFUGBm1wLFLVVEcwPHv+d2j5ybUu2Mo5o0WhwqHBqmIO/gHuDgEDUIiucSdIqjiiumoLYGDw6MGQVDEUV5wCBSnVJCGBt/BIghCn/XEYx3u9T9o88NFiNwT9e0sDD6uzTmU+XXJtDvV3Xs3M5VK58BXvendEO9WMgRnabZXiJkEoQ0Z+W89tWuRKm4d1z1F62WtQiTD3I/XEqbLrNCqEdUf/kFhor3L4k/DM+/VVhh1R0Rm7/340/XbI7WTL1cXxUNOtT+I4zPCIaEFn2AVNDvgDsq/+9UD/q82n+88LyOfb/b1WUmGTP+0QnM9rcOdhWr56FXU8D8mujNhyhf+I49IKkFHNiYB9/2G+aAkpDT7SxRNf81KRwXbwliquv4V2pQvjhUa4Yqx4g5K/7pE3p5aS9S9m23MHIaepd6ft2bFhQIoGzkWK9hQBeANjEKcpSnoguFkkotwDvBSh3CD4dUfAAAAAElFTkSuQmCC" ;
      m_t_hell_plots : base64_png "iVBORw0KGgoAAAANSUhEUgAAAGQAAAAoAQMAAAAyts0AAAAABlBMVEX/////AADrWueTAAAAAXRSTlMAQObYZgAAAOdJREFUKM9jYCAFMDb3P2OG85iPz//P3oDg3X+PzLurj8T7P385MxIPReX7+8+R5J7fOY7Ea7///PMPZPv+/4G75fn0338RPFehyJQNcB6r0EydKXAeI1OnygSEJ5gaGRqQPIUsh8frHwwYL/w/+AHqlH8V/D/+P/8B81AF/5//521gXvghHzcvXwTm6B0ycf3+N+AqbeLm+cP0/bOwk5vPA+O9BPL6WP7AePb79sn7wXgn66//0ueH8Q7GX//Ezw3Vx+jpLSjAwqkB5Tl6BgqwcCB4QDkOBRiPg0GAhQHGY/A0YCAVAADshVrdrxU0GQAAAABJRU5ErkJggg==" ;
      m_t_no_trouble : base64_png "iVBORw0KGgoAAAANSUhEUgAAAGQAAAAqAQMAAAB/fmwLAAAABlBMVEX/////AADrWueTAAAAAXRSTlMAQObYZgAAAP5JREFUKM9jYCAJMLOxOyDx2u0fIPGO239A4r2vrUDiPS9E5v3/iMzb/wMP79cPZF78CyTeuvgTSDwlFySXMaqg8FDlFBiQeAwKB4jxOP+ff4wXFOUfM/wD8/795//xeP73xv8Quf/9fx7f/94IluN89lk+7vGc+sZLIB7Hl8cycY/3fm78BZZ78t8m7vF+mMoP/+3kHt/9DeFxPHi9T+7x3urGM2BHfn29b9/jOb9/guWYPr6e/uv//P9/wfYxAHmf/s9f+7cezHPMnCiwV1hloyqUJyiQyaQyVRPCUxQU8GRSmaAB5TEIuDIJNGhAw8GAwYWNZQIHDi87MJAIAKXRbDraoE+MAAAAAElFTkSuQmCC" ;
      m_t_rue_fear : base64_png "iVBORw0KGgoAAAANSUhEUgAAAGQAAAAoAQMAAAAyts0AAAAABlBMVEX/////AADrWueTAAAAAXRSTlMAQObYZgAAAMVJREFUKM9jYCAA5A+02DcgeI/76g8geJ/76xFycsl9JQieTHJfHao+ZB6yPtnivmKEfbbFyCpti/8h2QfkxSN4ukZfPB0QPMUlXgieiqIKFwMSTwSZxyjAhNO7jAxEgop6dvYPcF3//ve3/0Di8bf/gfPOvJRvnwHnnfgrf1wCzvvzX/b4DySezXMk3jP75zFw3pX/9u8RvBf/f/yH8xhe7N9Zj+CtmLTQ2wfOOzBlhbcHnNcgouDJgcRjQOIxsDBwEvQ2APCuSxYohbHgAAAAAElFTkSuQmCC" ;
   }
}
